diff -Naur alex4src/src/main.c alex4srccfg//src/main.c
--- alex4src/src/main.c	2010-03-26 10:19:43.000000000 +0100
+++ alex4srccfg//src/main.c	2010-03-26 10:27:59.000000000 +0100
@@ -66,6 +66,7 @@
 Thisc *hisc_table;
 Thisc *hisc_table_space;
 char working_directory[1024];
+char cfg_file[300];
 
 // the map
 Tmap *map = NULL;
@@ -612,6 +613,85 @@
 	gui_bg_color = 254;
 }
 
+void saveconfig()
+{
+	FILE *newconfigfile = fopen(cfg_file,"w");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"[graphics]\n");
+	fprintf(newconfigfile,"# controls the startup resolution\n");
+	fprintf(newconfigfile,"# Setting lower resolutions than 160x120 might result in\n");
+	fprintf(newconfigfile,"# weird undocumented side affects in the rendering.\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# start in full screen or not (1 = fullscreen, 0 = windowed)\n");
+	fprintf(newconfigfile,"fullscreen = 0\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# fullscreen width and height (used if fullscreen = 1)\n");
+	fprintf(newconfigfile,"f_width = 640\n");
+	fprintf(newconfigfile,"f_height = 480\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# window width and height (used if fullscreen = 0)\n");
+	fprintf(newconfigfile,"w_width = 640\n");
+	fprintf(newconfigfile,"w_height = 480\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# turns vertical sync on or off (1 = on, 0 = off)\n");
+	fprintf(newconfigfile,"vsync = 0\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"[sound]\n");
+	fprintf(newconfigfile,"# these options controls the sound and music \n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# controls what sound and mixing device to use\n");
+	fprintf(newconfigfile,"# 0 = no sound whatsoever\n");
+	fprintf(newconfigfile,"# 1 = autodetect sound device\n");
+	fprintf(newconfigfile,"# 2 = use DirectSound device with direct mixing\n");
+	fprintf(newconfigfile,"# 3 = use DirectSound device with Allegro mixing\n");
+	fprintf(newconfigfile,"sound_device = 3\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# controls the volume of the samples (0-255 (0 = no sound))\n");
+	fprintf(newconfigfile,"sample_volume = 50\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# controls the volume of the music (0-255 (0 = no music))\n");
+	fprintf(newconfigfile,"music_volume = 120\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# use the sound datafile or not (0 = no, 1 = yes)\n");
+	fprintf(newconfigfile,"use_sound_datafile = 1\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# if use_sound_datafile is set to 0\n");
+	fprintf(newconfigfile,"# this should point to where the \n");
+	fprintf(newconfigfile,"# sounds can be loaded from\n");
+	fprintf(newconfigfile,"sfx_path = sfx/22KHz\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"##############################################################\n");
+	fprintf(newconfigfile,"# DUMB (mod control)\n");
+	fprintf(newconfigfile,"##############################################################\n");
+	fprintf(newconfigfile,"# You can edit this section to control the playback quality of\n");
+	fprintf(newconfigfile,"# the music in Alex 4.\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# dumb_resampling_quality can range from 0 (fastest) to 4 (best).\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# dumb_it_max_to_mix is the maximum number of samples DUMB will render at a\n");
+	fprintf(newconfigfile,"# time. \n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# Increase buffer_size to combat stuttering.\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# The module will be rendered at a sampling frequency specified by sound_freq.\n");
+	fprintf(newconfigfile,"# This variable is also used by Allegro for initialising the sound hardware.\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"# You can ignore the quality variable. Allegro uses it when relaying the audio\n");
+	fprintf(newconfigfile,"# stream to the sound card. 2 is the maximum, and is only comparable in quality\n");
+	fprintf(newconfigfile,"# to dumb_resampling_quality = 1. Only a masochist would reduce it. \n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"[dumb]\n");
+	fprintf(newconfigfile,"dumb_resampling_quality = 4\n");
+	fprintf(newconfigfile,"dumb_it_max_to_mix = 256\n");
+	fprintf(newconfigfile,"buffer_size = 4096\n");
+	fprintf(newconfigfile,"sound_freq = 44100\n");
+	fprintf(newconfigfile,"\n");
+	fprintf(newconfigfile,"quality = 2\n");
+	fprintf(newconfigfile,"\n");
+	fclose(newconfigfile);
+}
+
 // init the game
 int init_game(const char *map_file) {
 	PACKFILE *pf;
@@ -624,10 +704,14 @@
 	// various allegro things
 	log2file(" initializing allegro");
 	garble_string(init_string, 53);
-	char cfg_file[300];
 	sprintf(cfg_file, "%s/.alex4/alex4.ini", getenv("HOME"));
+	FILE *cfgcheck = fopen(cfg_file,"r");
+	if(!cfgcheck)
+	{
+	saveconfig();
+	}
+
 	set_config_file(cfg_file);
-	
 	// install timers
 	log2file(" installing timers");
 	install_timers();