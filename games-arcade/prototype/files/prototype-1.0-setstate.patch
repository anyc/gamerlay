diff -Naur Engine.cpp Engine.cpp
--- Engine.cpp	2009-10-02 08:17:54.000000000 +0200
+++ Engine.cpp	2009-10-02 08:56:20.000000000 +0200
@@ -97,7 +97,7 @@
 	bBossFight = false;
 	bCompileWithEditor = false;
 	StartFrontEnd();
-	SetState(UpdateIntro,RenderIntro);
+	SetState(&Engine::UpdateIntro,&Engine::RenderIntro);
 
 	//start rolling
 	Pump();
@@ -430,8 +430,7 @@
 				bHyperMode = false;
 				bBossFight = false;
 				StartFrontEnd();
-				SetState(UpdateSplash,RenderSplash);
-				SetStateTimed(UpdateSplash,RenderSplash,0);
+				SetState(&Engine::UpdateSplash,&Engine::RenderSplash);				SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 				mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 				fUIDelay = mTimer.GetTime();
 				iOption = 0;
diff -Naur FrontEnd.cpp FrontEnd.cpp
--- FrontEnd.cpp	2009-10-02 08:14:42.000000000 +0200
+++ FrontEnd.cpp	2009-10-02 08:58:02.000000000 +0200
@@ -33,7 +33,7 @@
 	mbTimedState = false;
 	fGameOverFrame = 0;
 	StartFadeIn();
-	SetState(UpdateIntro,RenderIntro);
+	SetState(&Engine::UpdateIntro,&Engine::RenderIntro);
 //	gLog.OutPut("StartFrontEnd END\n");
 }
 //================================================================================================//
@@ -213,15 +213,13 @@
 		case 0://start game
 			stmSplash.Stop(30);
 			smpUIselect.Play(1);
-			SetState(UpdateSplash2,RenderSplash);
-			SetStateTimed(UpdateGame,RenderGame,2,StartGame);
+			SetState(&Engine::UpdateSplash2,&Engine::RenderSplash);			SetStateTimed(&Engine::UpdateGame,&Engine::RenderGame,2,&Engine::StartGame);
 			mFade.StartFadeOut(mTimer.GetTime(),0,2.15f);
 			KEY_ATTACK1.state = RELEASED;
 			break;
 		case 1://configure
 			smpUImove.Play(1);
-			SetState(UpdateSplash2,RenderSplash);
-			SetStateTimed(UpdateConfig,RenderConfig,0.25f,StartFadeIn);
+			SetState(&Engine::UpdateSplash2,&Engine::RenderSplash);			SetStateTimed(&Engine::UpdateConfig,&Engine::RenderConfig,0.25f,&Engine::StartFadeIn);
 			mFade.StartFadeOut(mTimer.GetTime(),2,0.3f);
 			break;
 		case 2://editor
@@ -234,15 +232,13 @@
 				if(!LoadEditorData())
 					return;
 				bUseEditor = true;
-				SetState(NULL,RenderSplash);
-				SetStateTimed(UpdateEditor,RenderEditor,0.25f);
+				SetState(NULL,&Engine::RenderSplash);				SetStateTimed(&Engine::UpdateEditor,&Engine::RenderEditor,0.25f);
 				StartEditor();
 			}
 			else
 			{
 				smpUImove.Play(1);
-				SetState(UpdateSplash2,RenderSplash);
-				SetStateTimed(UpdateHowToPlay,RenderHowToPlay,0.25f,StartFadeIn);
+				SetState(NULL,&Engine::RenderSplash);				SetStateTimed(&Engine::UpdateEditor,&Engine::RenderEditor,0.25f);
 				mFade.StartFadeOut(mTimer.GetTime(),2,0.3f);
 			}
 			break;
@@ -433,8 +429,7 @@
 				gSerializer.ReadVariable("Controls.cfg",sz,mKeys[n].SecondaryKey);
 			}
 			//back to main
-			SetState(UpdateSplash2,RenderConfig);
-			SetStateTimed(UpdateSplash,RenderSplash,0.25f,StartFadeIn);
+			SetState(&Engine::UpdateSplash2,&Engine::RenderConfig);			SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0.25f,&Engine::StartFadeIn);
 			mFade.StartFadeOut(mTimer.GetTime(),2,0.3f);
 			break;
 
@@ -577,13 +572,13 @@
 	bHyperMode = false;
 	bBossFight = false;
 	bWimpMode = false;
-	SetState(UpdateGameOver,RenderGameOver);
+	SetState(&Engine::UpdateGameOver,&Engine::RenderGameOver);
 	stmSplash.Load("Data/Sound/GameOver.ogg",false);
 	stmSplash.Play(30);
 	StartFadeIn();
 	fGameOverFrame = 0;
 	bGameOverFrame = false;
-	SetStateTimed(UpdateGameOver,RenderGameOver,10,EndGameOver);
+	SetStateTimed(&Engine::UpdateGameOver,&Engine::RenderGameOver,10,&Engine::EndGameOver);
 }
 void Engine::EndGameOver()
 {
@@ -591,12 +586,12 @@
 	{
 		if(mPlayer.iScore>iHiScore[n])
 		{
-			SetStateTimed(UpdateEnterHiScore,RenderEnterHiScore,3,StartEnterHiScore);
+			SetStateTimed(&Engine::UpdateEnterHiScore,&Engine::RenderEnterHiScore,3,&Engine::StartEnterHiScore);
 			mFade.StartFadeOut(mTimer.GetTime(),2,3.5f);
 			return;
 		}
 	}
-	SetStateTimed(UpdateIntro,RenderIntro,3,StartFrontEnd);
+	SetStateTimed(&Engine::UpdateIntro,&Engine::RenderIntro,3,&Engine::StartFrontEnd);
 	mFade.StartFadeOut(mTimer.GetTime(),2,3.5f);
 }
 void Engine::UpdateGameOver(float delta)
@@ -642,7 +637,7 @@
 {
 	if(mTimer.GetTime()>IntroTimer+20)
 	{
-		SetStateTimed(UpdateIntro2,RenderIntro2,1,StartFadeIn);
+		SetStateTimed(&Engine::UpdateIntro2,&Engine::RenderIntro2,1,&Engine::StartFadeIn);
 		mFade.StartFadeOut(mTimer.GetTime(),2,1.1f);
 		IntroTimer= mTimer.GetTime()+1;
 		fUIDelay = mTimer.GetTime();
@@ -650,8 +645,7 @@
 	}
 	if(KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 	{
-		SetState(UpdateSplash,RenderSplash);
-		SetStateTimed(UpdateSplash,RenderSplash,0);
+		SetState(&Engine::UpdateSplash,&Engine::RenderSplash);		SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 		mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 		fUIDelay = mTimer.GetTime();
 		iOption = 0;
@@ -707,7 +701,7 @@
 {
 	if(mTimer.GetTime()>IntroTimer+5)
 	{
-		SetStateTimed(UpdateIntro3,RenderIntro3,1,StartFadeIn);
+		SetStateTimed(&Engine::UpdateIntro3,&Engine::RenderIntro3,1,&Engine::StartFadeIn);
 		mFade.StartFadeOut(mTimer.GetTime(),2,1.1f);
 		IntroTimer= mTimer.GetTime()+1;
 		fUIDelay = mTimer.GetTime();
@@ -715,8 +709,7 @@
 	}
 	if(KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 	{
-		SetState(UpdateSplash,RenderSplash);
-		SetStateTimed(UpdateSplash,RenderSplash,0);
+		SetState(&Engine::UpdateSplash,&Engine::RenderSplash);		SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 		mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 		fUIDelay = mTimer.GetTime();
 		iOption = 0;
@@ -753,7 +746,7 @@
 	}
 	if(mTimer.GetTime()>IntroTimer+6)
 	{
-		SetStateTimed(UpdateIntro4,RenderIntro4,1,StartFadeIn);
+		SetStateTimed(&Engine::UpdateIntro4,&Engine::RenderIntro4,1,&Engine::StartFadeIn);
 		IntroTimer = mTimer.GetTime();
 		mFade.StartFadeOut(mTimer.GetTime(),2,1.1f);
 		return;
@@ -761,8 +754,7 @@
 	fGameOverFrame>15? fGameOverFrame-=15:fGameOverFrame += 0.25f;
 	if(KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 	{
-		SetState(UpdateSplash,RenderSplash);
-		SetStateTimed(UpdateSplash,RenderSplash,0);
+		SetState(&Engine::UpdateSplash,&Engine::RenderSplash);		SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 		mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 		fUIDelay = mTimer.GetTime();
 		iOption = 0;
@@ -823,7 +815,7 @@
 	fGameOverFrame>6? fGameOverFrame-=6:fGameOverFrame += 0.25f;
 	if(mTimer.GetTime()>IntroTimer+6)
 	{
-		SetStateTimed(UpdateHiScores,RenderHiScores,1,StartFadeIn);
+		SetStateTimed(&Engine::UpdateHiScores,&Engine::RenderHiScores,1,&Engine::StartFadeIn);
 		mFade.StartFadeOut(mTimer.GetTime(),2,1.1f);
 		IntroTimer = mTimer.GetTime()+1;
 		fUIDelay = mTimer.GetTime()+1;
@@ -832,8 +824,7 @@
 	}
 	if(KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 	{
-		SetState(UpdateSplash,RenderSplash);
-		SetStateTimed(UpdateSplash,RenderSplash,0);
+		SetState(&Engine::UpdateSplash,&Engine::RenderSplash);		SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 		mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 		fUIDelay = mTimer.GetTime();
 		return;
@@ -901,16 +892,14 @@
 		IntroTimer = mTimer.GetTime()+2;
 		fUIDelay = mTimer.GetTime()+2;
 		bDemo = true;
-		SetState(UpdateSplash2,RenderHiScores);
-		SetStateTimed(UpdateGame,RenderGame,2,StartGame);
+		SetState(&Engine::UpdateSplash2,&Engine::RenderHiScores);		SetStateTimed(&Engine::UpdateGame,&Engine::RenderGame,2,&Engine::StartGame);
 		mFade.StartFadeOut(mTimer.GetTime(),0,2.1f);
 		fGameDifficulty = 2;
 		return;
 	}
 	if(KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 	{
-		SetState(UpdateSplash,RenderSplash);
-		SetStateTimed(UpdateSplash,RenderSplash,0);
+		SetState(&Engine::UpdateSplash,&Engine::RenderSplash);		SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 		mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 		fUIDelay = mTimer.GetTime();
 		iOption = 0;
@@ -957,7 +946,7 @@
 //================================================================================================//
 void Engine::StartEnterHiScore()
 {
-	SetState(UpdateEnterHiScore,RenderEnterHiScore);
+	SetState(&Engine::UpdateEnterHiScore,&Engine::RenderEnterHiScore);
 	stmSplash.Load("Data/Sound/HiScores.ogg",false);
 	stmSplash.Play(30);
 	StartFadeIn();
@@ -1024,8 +1013,7 @@
 			iScoreEntryDigit++;
 			if(iScoreEntryDigit>4)
 			{
-				SetState(UpdateSplash2,RenderEnterHiScore);
-				SetStateTimed(UpdateIntro,RenderIntro,3,StartFrontEnd);
+				SetState(&Engine::UpdateSplash2,&Engine::RenderEnterHiScore);				SetStateTimed(&Engine::UpdateIntro,&Engine::RenderIntro,3,&Engine::StartFrontEnd);
 				mFade.StartFadeOut(mTimer.GetTime(),2,3.1f);
 				IntroTimer = mTimer.GetTime()+1;
 				fUIDelay = mTimer.GetTime()+1;
@@ -1171,8 +1159,7 @@
 	if(KEY_UI_SELECT.state == JUST_PRESSED || KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 	{
 		smpUImove.Play(1);
-		SetState(UpdateSplash2,RenderHowToPlay);
-		SetStateTimed(UpdateSplash,RenderSplash,0.25f,StartFadeIn);
+		SetState(&Engine::UpdateSplash2,&Engine::RenderHowToPlay);		SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0.25f,&Engine::StartFadeIn);
 		mFade.StartFadeOut(mTimer.GetTime(),2,0.3f);
 	}
 }
diff -Naur Game.cpp Game.cpp
--- Game.cpp	2009-10-02 08:14:42.000000000 +0200
+++ Game.cpp	2009-10-02 08:56:20.000000000 +0200
@@ -184,8 +184,7 @@
 		}
 		if(KEY_ATTACK1.state == JUST_PRESSED || KEY_ATTACK2.state == JUST_PRESSED || KEY_UI_SELECT.state == JUST_PRESSED || KEY_UI_SELECT2.state == JUST_PRESSED)
 		{
-			SetState(UpdateSplash,RenderSplash);
-			SetStateTimed(UpdateSplash,RenderSplash,0);
+			SetState(&Engine::UpdateSplash,&Engine::RenderSplash);			SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0);
 			mFade.StartFadeIn(mTimer.GetTime(),2,0.5f);
 			fUIDelay = mTimer.GetTime();
 			bDemo = false;
@@ -644,7 +643,7 @@
 void Engine::StartCompleted()
 {
 	bGameCompleted = true;
-	SetStateTimed(UpdateCongratulations,RenderCongratulations,5,FadeInEndCompleted);
+	SetStateTimed(&Engine::UpdateCongratulations,&Engine::RenderCongratulations,5,&Engine::FadeInEndCompleted);
 	mFade.StartFadeOut(mTimer.GetTime(),2,5.1f);
 	fUIDelay = mTimer.GetTime()+5;
 	stmStage.Stop(FSOUND_ALL);
@@ -657,11 +656,11 @@
 void Engine::FadeInEndCompleted()
 {
 	StartFadeIn();
-	SetStateTimed(UpdateCongratulations,RenderCongratulations,20,EndCompleted);
+	SetStateTimed(&Engine::UpdateCongratulations,&Engine::RenderCongratulations,20,&Engine::EndCompleted);
 }
 void Engine::EndCompleted()
 {
-	SetStateTimed(NULL,RenderIntro,3,StartGameOver);
+	SetStateTimed(NULL,&Engine::RenderIntro,3,&Engine::StartGameOver);
 	mFade.StartFadeOut(mTimer.GetTime(),2,3.1f);
 	IntroTimer = mTimer.GetTime()+1;
 	fUIDelay = mTimer.GetTime()+1;
