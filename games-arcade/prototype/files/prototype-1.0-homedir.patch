diff -Naur Engine.cpp Engine.cpp
--- Engine.cpp	2009-10-02 08:40:26.000000000 +0200
+++ Engine.cpp	2009-10-02 08:45:51.000000000 +0200
@@ -23,18 +23,22 @@
 	int renderTargets=0;
 	int FPS=0;
 	int scanlines = 0;
-	gSerializer.PutComment("Engine.cfg","[Display Properties]");
-/*	gSerializer.ReadVariable("Engine.cfg","winWidth",winWidth);
-	gSerializer.ReadVariable("Engine.cfg","winHeight",winHeight);
-	gSerializer.ReadVariable("Engine.cfg","bpp",bpp);
-*/	gSerializer.ReadVariable("Engine.cfg","Vsync",vsync);
-	gSerializer.ReadVariable("Engine.cfg","PBuffers",renderTargets);
-	gSerializer.ReadVariable("Engine.cfg","ShowFPS",FPS);
-	gSerializer.ReadVariable("Engine.cfg","Fullscreen",fullscreen);
-	gSerializer.ReadVariable("Engine.cfg","Scanlines",scanlines);
-	gSerializer.PutComment("Engine.cfg","[Engine Properties]");
-	gSerializer.ReadVariable("Engine.cfg","Keeplog",log);
-	gSerializer.ReadVariable("Engine.cfg","Joystick",joystick);
+
+	char enginepath[PATH_MAX];
+	snprintf(enginepath, PATH_MAX, "%s/.prototype/Engine.cfg", getenv("HOME"));
+
+	gSerializer.PutComment(enginepath,"[Display Properties]");
+/*	gSerializer.ReadVariable(enginepath,"winWidth",winWidth);
+	gSerializer.ReadVariable(enginepath,"winHeight",winHeight);
+	gSerializer.ReadVariable(enginepath,"bpp",bpp);
+*/	gSerializer.ReadVariable(enginepath,"Vsync",vsync);
+	gSerializer.ReadVariable(enginepath,"PBuffers",renderTargets);
+	gSerializer.ReadVariable(enginepath,"ShowFPS",FPS);
+	gSerializer.ReadVariable(enginepath,"Fullscreen",fullscreen);
+	gSerializer.ReadVariable(enginepath,"Scanlines",scanlines);
+	gSerializer.PutComment(enginepath,"[Engine Properties]");
+	gSerializer.ReadVariable(enginepath,"Keeplog",log);
+	gSerializer.ReadVariable(enginepath,"Joystick",joystick);
 	FPS?bShowFps = true: bShowFps= false;
 	scanlines?bScanlines=true:bScanlines=false;
 	renderTargets? bRenderTargetSupport=true:bRenderTargetSupport=false;
@@ -310,14 +314,17 @@
 		mKeys[5].SecondaryKey = SDLK_SPACE;
 	}
 
-	gSerializer.PutComment("Controls.cfg","[Control Configuration]");
+	char controlspath[PATH_MAX];
+	snprintf(controlspath, PATH_MAX, "%s/.prototype/Controls.cfg", getenv("HOME"));
+
+	gSerializer.PutComment(controlspath,"[Control Configuration]");
 	for(int n=0; n<6;n++)
 	{
 		char sz[256];
 		sprintf(sz,"%s_Primary",mKeys[n].KeyName);
-		gSerializer.ReadVariable("Controls.cfg",sz,mKeys[n].PrimaryKey);
+		gSerializer.ReadVariable(controlspath,sz,mKeys[n].PrimaryKey);
 		sprintf(sz,"%s_Secondary",mKeys[n].KeyName);
-		gSerializer.ReadVariable("Controls.cfg",sz,mKeys[n].SecondaryKey);
+		gSerializer.ReadVariable(controlspath,sz,mKeys[n].SecondaryKey);
 	}
 }
 //================================================================================================//
@@ -1178,26 +1185,29 @@
 	string s9("CHEAT");
 	string s10("*****");
 
-	gSerializer.ReadVariable("score.dat","1a",iHiScore[0]);
-	gSerializer.ReadVariable("score.dat","1b",s1);
-	gSerializer.ReadVariable("score.dat","2a",iHiScore[1]);
-	gSerializer.ReadVariable("score.dat","2b",s2);
-	gSerializer.ReadVariable("score.dat","3a",iHiScore[2]);
-	gSerializer.ReadVariable("score.dat","3b",s3);
-	gSerializer.ReadVariable("score.dat","4a",iHiScore[3]);
-	gSerializer.ReadVariable("score.dat","4b",s4);
-	gSerializer.ReadVariable("score.dat","5a",iHiScore[4]);
-	gSerializer.ReadVariable("score.dat","5b",s5);
-	gSerializer.ReadVariable("score.dat","6a",iHiScore[5]);
-	gSerializer.ReadVariable("score.dat","6b",s6);
-	gSerializer.ReadVariable("score.dat","7a",iHiScore[6]);
-	gSerializer.ReadVariable("score.dat","7b",s7);
-	gSerializer.ReadVariable("score.dat","8a",iHiScore[7]);
-	gSerializer.ReadVariable("score.dat","8b",s8);
-	gSerializer.ReadVariable("score.dat","9a",iHiScore[8]);
-	gSerializer.ReadVariable("score.dat","9b",s9);
-	gSerializer.ReadVariable("score.dat","10a",iHiScore[9]);
-	gSerializer.ReadVariable("score.dat","10b",s10);
+	char scorepath[PATH_MAX];
+	snprintf(scorepath, PATH_MAX, "%s/.prototype/score.dat", getenv("HOME"));
+
+	gSerializer.ReadVariable(scorepath,"1a",iHiScore[0]);
+	gSerializer.ReadVariable(scorepath,"1b",s1);
+	gSerializer.ReadVariable(scorepath,"2a",iHiScore[1]);
+	gSerializer.ReadVariable(scorepath,"2b",s2);
+	gSerializer.ReadVariable(scorepath,"3a",iHiScore[2]);
+	gSerializer.ReadVariable(scorepath,"3b",s3);
+	gSerializer.ReadVariable(scorepath,"4a",iHiScore[3]);
+	gSerializer.ReadVariable(scorepath,"4b",s4);
+	gSerializer.ReadVariable(scorepath,"5a",iHiScore[4]);
+	gSerializer.ReadVariable(scorepath,"5b",s5);
+	gSerializer.ReadVariable(scorepath,"6a",iHiScore[5]);
+	gSerializer.ReadVariable(scorepath,"6b",s6);
+	gSerializer.ReadVariable(scorepath,"7a",iHiScore[6]);
+	gSerializer.ReadVariable(scorepath,"7b",s7);
+	gSerializer.ReadVariable(scorepath,"8a",iHiScore[7]);
+	gSerializer.ReadVariable(scorepath,"8b",s8);
+	gSerializer.ReadVariable(scorepath,"9a",iHiScore[8]);
+	gSerializer.ReadVariable(scorepath,"9b",s9);
+	gSerializer.ReadVariable(scorepath,"10a",iHiScore[9]);
+	gSerializer.ReadVariable(scorepath,"10b",s10);
 	strcpy(szHiScore[0],s1.c_str());
 	strcpy(szHiScore[1],s2.c_str());
 	strcpy(szHiScore[2],s3.c_str());
@@ -1211,27 +1221,30 @@
 }
 void Engine::SaveScores()
 {
+	char scorepath[PATH_MAX];
+	snprintf(scorepath, PATH_MAX, "%s/.prototype/score.dat", getenv("HOME"));
+
 //	DeleteFile("score.dat");
-	gSerializer.ReadVariable("score.dat","1a",iHiScore[0]);
-	gSerializer.ReadVariable("score.dat","1b",iHiScore[0]);
-	gSerializer.ReadVariable("score.dat","2a",iHiScore[1]);
-	gSerializer.ReadVariable("score.dat","2b",iHiScore[1]);
-	gSerializer.ReadVariable("score.dat","3a",iHiScore[2]);
-	gSerializer.ReadVariable("score.dat","3b",iHiScore[2]);
-	gSerializer.ReadVariable("score.dat","4a",iHiScore[3]);
-	gSerializer.ReadVariable("score.dat","4b",iHiScore[3]);
-	gSerializer.ReadVariable("score.dat","5a",iHiScore[4]);
-	gSerializer.ReadVariable("score.dat","5b",iHiScore[4]);
-	gSerializer.ReadVariable("score.dat","6a",iHiScore[5]);
-	gSerializer.ReadVariable("score.dat","6b",iHiScore[5]);
-	gSerializer.ReadVariable("score.dat","7a",iHiScore[6]);
-	gSerializer.ReadVariable("score.dat","7b",iHiScore[6]);
-	gSerializer.ReadVariable("score.dat","8a",iHiScore[7]);
-	gSerializer.ReadVariable("score.dat","8b",iHiScore[7]);
-	gSerializer.ReadVariable("score.dat","9a",iHiScore[8]);
-	gSerializer.ReadVariable("score.dat","9b",iHiScore[8]);
-	gSerializer.ReadVariable("score.dat","10a",iHiScore[9]);
-	gSerializer.ReadVariable("score.dat","10b",iHiScore[9]);
+	gSerializer.ReadVariable(scorepath,"1a",iHiScore[0]);
+	gSerializer.ReadVariable(scorepath,"1b",iHiScore[0]);
+	gSerializer.ReadVariable(scorepath,"2a",iHiScore[1]);
+	gSerializer.ReadVariable(scorepath,"2b",iHiScore[1]);
+	gSerializer.ReadVariable(scorepath,"3a",iHiScore[2]);
+	gSerializer.ReadVariable(scorepath,"3b",iHiScore[2]);
+	gSerializer.ReadVariable(scorepath,"4a",iHiScore[3]);
+	gSerializer.ReadVariable(scorepath,"4b",iHiScore[3]);
+	gSerializer.ReadVariable(scorepath,"5a",iHiScore[4]);
+	gSerializer.ReadVariable(scorepath,"5b",iHiScore[4]);
+	gSerializer.ReadVariable(scorepath,"6a",iHiScore[5]);
+	gSerializer.ReadVariable(scorepath,"6b",iHiScore[5]);
+	gSerializer.ReadVariable(scorepath,"7a",iHiScore[6]);
+	gSerializer.ReadVariable(scorepath,"7b",iHiScore[6]);
+	gSerializer.ReadVariable(scorepath,"8a",iHiScore[7]);
+	gSerializer.ReadVariable(scorepath,"8b",iHiScore[7]);
+	gSerializer.ReadVariable(scorepath,"9a",iHiScore[8]);
+	gSerializer.ReadVariable(scorepath,"9b",iHiScore[8]);
+	gSerializer.ReadVariable(scorepath,"10a",iHiScore[9]);
+	gSerializer.ReadVariable(scorepath,"10b",iHiScore[9]);
 }
 
 void Engine::RenderScanLines()
diff -Naur FrontEnd.cpp FrontEnd.cpp
--- FrontEnd.cpp	2009-10-02 08:40:49.000000000 +0200
+++ FrontEnd.cpp	2009-10-02 08:46:44.000000000 +0200
@@ -419,14 +419,17 @@
 		case 13://back to main
 			//write out new cfg
 //			DeleteFile("Controls.cfg");
-			gSerializer.PutComment("Controls.cfg","[Control Configuration]");
+
+			char controlspath[PATH_MAX];
+			snprintf(controlspath, PATH_MAX, "%s/.prototype/Controls.cfg", getenv("HOME"));
+			gSerializer.PutComment(controlspath,"[Control Configuration]");
 			for(int n=0; n<6;n++)
 			{
 				char sz[256];
 				sprintf(sz,"%s_Primary",mKeys[n].KeyName);
-				gSerializer.ReadVariable("Controls.cfg",sz,mKeys[n].PrimaryKey);
+				gSerializer.ReadVariable(controlspath,sz,mKeys[n].PrimaryKey);
 				sprintf(sz,"%s_Secondary",mKeys[n].KeyName);
-				gSerializer.ReadVariable("Controls.cfg",sz,mKeys[n].SecondaryKey);
+				gSerializer.ReadVariable(controlspath,sz,mKeys[n].SecondaryKey);
 			}
 			//back to main
 			SetState(&Engine::UpdateSplash2,&Engine::RenderConfig);			SetStateTimed(&Engine::UpdateSplash,&Engine::RenderSplash,0.25f,&Engine::StartFadeIn);
diff -Naur Log.cpp Log.cpp
--- Log.cpp	2009-10-02 08:14:42.000000000 +0200
+++ Log.cpp	2009-10-02 08:47:53.000000000 +0200
@@ -1,4 +1,6 @@
 #include "Log.h"
+#include <sys/stat.h>
+#include "stdafx.h"
 //================================================================================================//
 						/**************************
 						** global logging system **	
@@ -9,6 +11,8 @@
 
 void Log::OutPut(string str)
 {
+	char logpath[PATH_MAX];
+	snprintf(logpath, PATH_MAX, "%s/.prototype/Logfile.txt", getenv("HOME"));
 	if(!bKeepLog)
 		return;
 #ifdef PRINT_TO_CONSOLE
@@ -17,11 +21,11 @@
 	ofstream f;
 	if(!lcount)
 	{
-		f.open("Logfile.txt");
+		f.open(logpath);
 		f << "Logfile created on " << __DATE__ << endl;
 	}
 	else
-		f.open("Logfile.txt",ios::app);
+		f.open(logpath,ios::app);
 
 	if(f.is_open())
 	{
diff -Naur ProtoType.cpp ProtoType.cpp
--- ProtoType.cpp	2009-10-02 08:36:58.000000000 +0200
+++ ProtoType.cpp	2009-10-02 08:48:22.000000000 +0200
@@ -2,9 +2,13 @@
 //
 
 #include "stdafx.h"
+#include <sys/stat.h>
 
 int main(int argc, char* argv[])
 {
+	char cfg_path[PATH_MAX];
+	snprintf(cfg_path, PATH_MAX, "%s/.prototype/", getenv("HOME"));
+	mkdir(cfg_path, 0755);
 	Engine engine(640,480,false,"PROTOTYPE");
 
 	return 0;
