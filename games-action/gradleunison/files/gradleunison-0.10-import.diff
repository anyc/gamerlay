diff -Naur GU/import/SDL.d GU-gentoo/import/SDL.d
--- GU/import/SDL.d	2004-05-08 14:14:14.000000000 +0200
+++ GU-gentoo/import/SDL.d	2007-10-10 19:30:12.000000000 +0200
@@ -20,18 +20,21 @@
     slouken@devolution.com
 */
 
-import SDL_types;
-import SDL_getenv;
-import SDL_error;
-import SDL_rwops;
-import SDL_timer;
-import SDL_audio;
-import SDL_cdrom;
-import SDL_joystick;
-import SDL_events;
-import SDL_video;
-import SDL_byteorder;
-import SDL_Version;
+public import SDL_types;
+public import SDL_getenv;
+public import SDL_error;
+public import SDL_rwops;
+public import SDL_timer;
+public import SDL_audio;
+public import SDL_cdrom;
+public import SDL_keyboard;
+public import SDL_keysym;
+public import SDL_joystick;
+public import SDL_mouse;
+public import SDL_events;
+public import SDL_video;
+public import SDL_byteorder;
+public import SDL_version;
 
 extern(C):
 
@@ -72,10 +75,10 @@
  * dynamically linked library.  You should call it upon all exit conditions.
  */
 void SDL_Quit();
-
+/+
 void SDL_SetModuleHandle(void *hInst);
 //extern(Windows) void* GetModuleHandle(char*);
-extern(Windows) void* GetModuleHandleA(char*);
+extern(Windows) void* GetModuleHandle(char*);
 
 static this()
 {
@@ -83,10 +86,11 @@
 	if (SDL_Init(SDL_INIT_NOPARACHUTE) < 0)
 		throw new Error("Error loading SDL");
 //	SDL_SetModuleHandle(GetModuleHandle(null));
-	SDL_SetModuleHandle(GetModuleHandleA(null));
+	SDL_SetModuleHandle(GetModuleHandle(null));
 }
 
 static ~this()
 {
 	SDL_Quit();
 }
++/
diff -Naur GU/import/SDL_endian.d GU-gentoo/import/SDL_endian.d
--- GU/import/SDL_endian.d	2004-05-08 12:55:52.000000000 +0200
+++ GU-gentoo/import/SDL_endian.d	2007-10-10 19:30:12.000000000 +0200
@@ -47,7 +47,7 @@
 */
 
 Uint16 SDL_Swap16(Uint16 D) {
-	return((D<<8)|(D>>8));
+	return cast(Uint16)((D<<8)|(D>>8));
 }
 
 Uint32 SDL_Swap32(Uint32 D) {
diff -Naur GU/import/SDL_events.d GU-gentoo/import/SDL_events.d
--- GU/import/SDL_events.d	2004-12-02 15:48:16.000000000 +0100
+++ GU-gentoo/import/SDL_events.d	2007-10-10 19:30:12.000000000 +0200
@@ -105,7 +105,7 @@
 	Uint8 type;	/* SDL_KEYDOWN or SDL_KEYUP */
 	Uint8 which;	/* The keyboard device index */
 	Uint8 state;	/* SDL_PRESSED or SDL_RELEASED */
-	SDL_keysym keysym;
+	SDL_keysym2 keysym;
 }
 
 /* Mouse motion event structure */
diff -Naur GU/import/SDL_keyboard.d GU-gentoo/import/SDL_keyboard.d
--- GU/import/SDL_keyboard.d	2002-01-04 15:28:12.000000000 +0100
+++ GU-gentoo/import/SDL_keyboard.d	2007-10-10 19:30:12.000000000 +0200
@@ -26,7 +26,7 @@
 // !!! A hack! struct SDL_keysym is defined in this module,
 // !!! so we need to resolve the nameclash...
 // !!! Definitely won't work on *NIX but for now will do.
-import SDL_Keysym;
+import SDL_keysym;
 
 extern(C):
 
@@ -46,7 +46,7 @@
 		An international character..
 	}
  */
-struct SDL_keysym {
+struct SDL_keysym2 {
 	Uint8 scancode;			/* hardware specific scancode */
 	SDLKey sym;			/* SDL virtual keysym */
 	SDLMod mod;			/* current key modifiers */
diff -Naur GU/import/SDL_syswm.d GU-gentoo/import/SDL_syswm.d
--- GU/import/SDL_syswm.d	2004-01-03 16:10:50.000000000 +0100
+++ GU-gentoo/import/SDL_syswm.d	2007-10-10 19:30:12.000000000 +0200
@@ -22,7 +22,7 @@
 
 /* Include file for SDL custom system window manager hooks */
 
-import SDL_Version;
+import SDL_version;
 
 extern(C):
 
diff -Naur GU/import/opengl.d GU-gentoo/import/opengl.d
--- GU/import/opengl.d	2004-01-09 10:52:04.000000000 +0100
+++ GU-gentoo/import/opengl.d	2007-10-10 19:30:12.000000000 +0200
@@ -1,10 +1,6 @@
-version (Win32) {
-	private import std.c.windows.windows;
-	extern(Windows):
-}
-version (linux) {
+
 	extern(C):
-}
+
 
 alias uint GLenum;
 alias ubyte GLboolean;
@@ -1116,7 +1112,7 @@
 /*************************************************************/
 
 void /*APIENTRY*/glAccum (GLenum op, GLfloat value);
-void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf ref);
+void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf);
 GLboolean /*APIENTRY*/glAreTexturesResident (GLsizei n, GLuint *textures, GLboolean *residences);
 void /*APIENTRY*/glArrayElement (GLint i);
 void /*APIENTRY*/glBegin (GLenum mode);
@@ -1369,7 +1365,7 @@
 void /*APIENTRY*/glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
 void /*APIENTRY*/glSelectBuffer (GLsizei size, GLuint *buffer);
 void /*APIENTRY*/glShadeModel (GLenum mode);
-void /*APIENTRY*/glStencilFunc (GLenum func, GLint ref, GLuint mask);
+void /*APIENTRY*/glStencilFunc (GLenum func, GLint, GLuint mask);
 void /*APIENTRY*/glStencilMask (GLuint mask);
 void /*APIENTRY*/glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
 void /*APIENTRY*/glTexCoord1d (GLdouble s);
diff -Naur GU/import/openglu.d GU-gentoo/import/openglu.d
--- GU/import/openglu.d	2003-12-04 04:15:26.000000000 +0100
+++ GU-gentoo/import/openglu.d	2007-10-10 19:30:12.000000000 +0200
@@ -1,11 +1,8 @@
 import opengl;
 
-version (Win32) {
-	extern(Windows):
-}
-version (linux) {
+
 	extern(C):
-}
+
 
 GLubyte* gluErrorString (
     GLenum   errCode);
diff -Naur GU/src/bulletcommand.d GU-gentoo/src/bulletcommand.d
--- GU/src/bulletcommand.d	2006-08-16 18:07:38.000000000 +0200
+++ GU-gentoo/src/bulletcommand.d	2007-10-10 19:31:33.000000000 +0200
@@ -37,7 +37,7 @@
 
 	buf.length = 256;
 	buf = fname ~ "\0";
-	parser[bank] = BulletMLParserTinyXML_new(buf);
+	parser[bank] = BulletMLParserTinyXML_new(buf.ptr);
 	if(parser[bank]) BulletMLParserTinyXML_parse(parser[bank]);
 	buf.length = 0;
 }
@@ -171,7 +171,8 @@
 			if(eid != -1){
 				TskBuf[eid].parent = BulletCommand.now.id;
 				d = (d <= 180.0f ? d : -(360.0f - d));
-				d = d / ROTVAL;
+				d = d / ROTVAL;
+				TskBuf[eid].roll = 0;
 				TskBuf[eid].bullet_speed = s;
 				TskBuf[eid].bullet_direction = d;
 				TskBuf[eid].bullet_velx = (sin(d) * (-s * VEL_SDM_SS_RATIO));
