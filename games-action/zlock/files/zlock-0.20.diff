diff -Naur z-lock/Makefile z-lock-gentoo/Makefile
--- z-lock/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ z-lock-gentoo/Makefile	2007-08-04 18:21:16.000000000 +0200
@@ -0,0 +1,25 @@
+DC=gdmd
+#DC=gdc
+ifeq ($(DC), gdmd)
+DFLAGS=-g -debug -O -d -release -Iimport -Isrc
+#DFLAGS=-g -debug -Iimport -Isrc
+DOUT=-of
+else
+DFLAGS=-O -frelease -Iimport -Isrc
+#DFLAGS=-g -fdebug -Iimport -Isrc
+DOUT=-o
+endif
+
+DSRC=$(shell find src/ -name "*.d")
+SOURCES=$(DSRC) import/SDL_video.d import/SDL_mixer.d
+OBJS=$(SOURCES:.d=.o)
+EXE=zlock
+
+all: $(EXE)
+
+$(EXE): $(OBJS)
+	gcc -o $@ $(OBJS) -lbulletml_d -lgphobos -lpthread -lm -lSDL -lGL -lGLU -lSDL_mixer
+
+$(OBJS): %.o: %.d
+	gdmd -d -c -of$@ $(DFLAGS) $<
+
diff -Naur z-lock/import/SDL.d z-lock-gentoo/import/SDL.d
--- z-lock/import/SDL.d	2004-05-08 14:14:14.000000000 +0200
+++ z-lock-gentoo/import/SDL.d	2007-09-07 12:05:38.000000000 +0200
@@ -20,73 +20,76 @@
     slouken@devolution.com
 */
 
-import SDL_types;
-import SDL_getenv;
-import SDL_error;
-import SDL_rwops;
-import SDL_timer;
-import SDL_audio;
-import SDL_cdrom;
-import SDL_joystick;
-import SDL_events;
-import SDL_video;
-import SDL_byteorder;
-import SDL_Version;
-
-extern(C):
-
-/* As of version 0.5, SDL is loaded dynamically into the application */
-
-/* These are the flags which may be passed to SDL_Init() -- you should
-   specify the subsystems which you will be using in your application.
-*/
-const uint SDL_INIT_TIMER		= 0x00000001;
-const uint SDL_INIT_AUDIO		= 0x00000010;
-const uint SDL_INIT_VIDEO		= 0x00000020;
-const uint SDL_INIT_CDROM		= 0x00000100;
-const uint SDL_INIT_JOYSTICK	= 0x00000200;
-const uint SDL_INIT_NOPARACHUTE	= 0x00100000;	/* Don't catch fatal signals */
-const uint SDL_INIT_EVENTTHREAD	= 0x01000000;	/* Not supported on all OS's */
-const uint SDL_INIT_EVERYTHING	= 0x0000FFFF;
-
-/* This function loads the SDL dynamically linked library and initializes 
- * the subsystems specified by 'flags' (and those satisfying dependencies)
- * Unless the SDL_INIT_NOPARACHUTE flag is set, it will install cleanup
- * signal handlers for some commonly ignored fatal signals (like SIGSEGV)
- */
-int SDL_Init(Uint32 flags);
-
-/* This function initializes specific SDL subsystems */
-int SDL_InitSubSystem(Uint32 flags);
-
-/* This function cleans up specific SDL subsystems */
-void SDL_QuitSubSystem(Uint32 flags);
-
-/* This function returns mask of the specified subsystems which have
-   been initialized.
-   If 'flags' is 0, it returns a mask of all initialized subsystems.
-*/
-Uint32 SDL_WasInit(Uint32 flags);
-
-/* This function cleans up all initialized subsystems and unloads the
- * dynamically linked library.  You should call it upon all exit conditions.
- */
-void SDL_Quit();
-
-void SDL_SetModuleHandle(void *hInst);
-//extern(Windows) void* GetModuleHandle(char*);
-extern(Windows) void* GetModuleHandleA(char*);
-
-static this()
-{
-	/* Load SDL dynamic link library */
-	if (SDL_Init(SDL_INIT_NOPARACHUTE) < 0)
-		throw new Error("Error loading SDL");
-//	SDL_SetModuleHandle(GetModuleHandle(null));
-	SDL_SetModuleHandle(GetModuleHandleA(null));
-}
-
-static ~this()
-{
-	SDL_Quit();
-}
+public import SDL_types;
+public import SDL_getenv;
+public import SDL_error;
+public import SDL_rwops;
+public import SDL_timer;
+public import SDL_audio;
+public import SDL_cdrom;
+public import SDL_joystick;
+public import SDL_events;
+public import SDL_video;
+public import SDL_byteorder;
+public import SDL_Version;
+public import SDL_Keysym;
+public import SDL_keyboard;
+public import SDL_mouse;
+
+extern(C):
+
+/* As of version 0.5, SDL is loaded dynamically into the application */
+
+/* These are the flags which may be passed to SDL_Init() -- you should
+   specify the subsystems which you will be using in your application.
+*/
+const uint SDL_INIT_TIMER		= 0x00000001;
+const uint SDL_INIT_AUDIO		= 0x00000010;
+const uint SDL_INIT_VIDEO		= 0x00000020;
+const uint SDL_INIT_CDROM		= 0x00000100;
+const uint SDL_INIT_JOYSTICK	= 0x00000200;
+const uint SDL_INIT_NOPARACHUTE	= 0x00100000;	/* Don't catch fatal signals */
+const uint SDL_INIT_EVENTTHREAD	= 0x01000000;	/* Not supported on all OS's */
+const uint SDL_INIT_EVERYTHING	= 0x0000FFFF;
+
+/* This function loads the SDL dynamically linked library and initializes 
+ * the subsystems specified by 'flags' (and those satisfying dependencies)
+ * Unless the SDL_INIT_NOPARACHUTE flag is set, it will install cleanup
+ * signal handlers for some commonly ignored fatal signals (like SIGSEGV)
+ */
+int SDL_Init(Uint32 flags);
+
+/* This function initializes specific SDL subsystems */
+int SDL_InitSubSystem(Uint32 flags);
+
+/* This function cleans up specific SDL subsystems */
+void SDL_QuitSubSystem(Uint32 flags);
+
+/* This function returns mask of the specified subsystems which have
+   been initialized.
+   If 'flags' is 0, it returns a mask of all initialized subsystems.
+*/
+Uint32 SDL_WasInit(Uint32 flags);
+
+/* This function cleans up all initialized subsystems and unloads the
+ * dynamically linked library.  You should call it upon all exit conditions.
+ */
+void SDL_Quit();
+
+/+
+void SDL_SetModuleHandle(void *hInst);
+extern(Windows) void* GetModuleHandle(char*);
+
+static this()
+{
+	/* Load SDL dynamic link library */
+	if (SDL_Init(SDL_INIT_NOPARACHUTE) < 0)
+		throw new Error("Error loading SDL");
+	SDL_SetModuleHandle(GetModuleHandle(null));
+}
+
+static ~this()
+{
+	SDL_Quit();
+}
++/
diff -Naur z-lock/import/SDL_Keysym.d z-lock-gentoo/import/SDL_Keysym.d
--- z-lock/import/SDL_Keysym.d	1970-01-01 01:00:00.000000000 +0100
+++ z-lock-gentoo/import/SDL_Keysym.d	2002-01-04 15:31:22.000000000 +0100
@@ -0,0 +1,308 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@devolution.com
+*/
+
+/* What we really want is a mapping of every raw key on the keyboard.
+   To support international keyboards, we use the range 0xA1 - 0xFF
+   as international virtual keycodes.  We'll follow in the footsteps of X11...
+   The names of the keys
+ */
+ 
+alias int SDLKey;
+enum {
+	/* The keyboard syms have been cleverly chosen to map to ASCII */
+	SDLK_UNKNOWN		= 0,
+	SDLK_FIRST		= 0,
+	SDLK_BACKSPACE		= 8,
+	SDLK_TAB		= 9,
+	SDLK_CLEAR		= 12,
+	SDLK_RETURN		= 13,
+	SDLK_PAUSE		= 19,
+	SDLK_ESCAPE		= 27,
+	SDLK_SPACE		= 32,
+	SDLK_EXCLAIM		= 33,
+	SDLK_QUOTEDBL		= 34,
+	SDLK_HASH		= 35,
+	SDLK_DOLLAR		= 36,
+	SDLK_AMPERSAND		= 38,
+	SDLK_QUOTE		= 39,
+	SDLK_LEFTPAREN		= 40,
+	SDLK_RIGHTPAREN		= 41,
+	SDLK_ASTERISK		= 42,
+	SDLK_PLUS		= 43,
+	SDLK_COMMA		= 44,
+	SDLK_MINUS		= 45,
+	SDLK_PERIOD		= 46,
+	SDLK_SLASH		= 47,
+	SDLK_0			= 48,
+	SDLK_1			= 49,
+	SDLK_2			= 50,
+	SDLK_3			= 51,
+	SDLK_4			= 52,
+	SDLK_5			= 53,
+	SDLK_6			= 54,
+	SDLK_7			= 55,
+	SDLK_8			= 56,
+	SDLK_9			= 57,
+	SDLK_COLON		= 58,
+	SDLK_SEMICOLON		= 59,
+	SDLK_LESS		= 60,
+	SDLK_EQUALS		= 61,
+	SDLK_GREATER		= 62,
+	SDLK_QUESTION		= 63,
+	SDLK_AT			= 64,
+	/* 
+	   Skip uppercase letters
+	 */
+	SDLK_LEFTBRACKET	= 91,
+	SDLK_BACKSLASH		= 92,
+	SDLK_RIGHTBRACKET	= 93,
+	SDLK_CARET		= 94,
+	SDLK_UNDERSCORE		= 95,
+	SDLK_BACKQUOTE		= 96,
+	SDLK_a			= 97,
+	SDLK_b			= 98,
+	SDLK_c			= 99,
+	SDLK_d			= 100,
+	SDLK_e			= 101,
+	SDLK_f			= 102,
+	SDLK_g			= 103,
+	SDLK_h			= 104,
+	SDLK_i			= 105,
+	SDLK_j			= 106,
+	SDLK_k			= 107,
+	SDLK_l			= 108,
+	SDLK_m			= 109,
+	SDLK_n			= 110,
+	SDLK_o			= 111,
+	SDLK_p			= 112,
+	SDLK_q			= 113,
+	SDLK_r			= 114,
+	SDLK_s			= 115,
+	SDLK_t			= 116,
+	SDLK_u			= 117,
+	SDLK_v			= 118,
+	SDLK_w			= 119,
+	SDLK_x			= 120,
+	SDLK_y			= 121,
+	SDLK_z			= 122,
+	SDLK_DELETE		= 127,
+	/* End of ASCII mapped keysyms */
+
+	/* International keyboard syms */
+	SDLK_WORLD_0		= 160,		/* 0xA0 */
+	SDLK_WORLD_1		= 161,
+	SDLK_WORLD_2		= 162,
+	SDLK_WORLD_3		= 163,
+	SDLK_WORLD_4		= 164,
+	SDLK_WORLD_5		= 165,
+	SDLK_WORLD_6		= 166,
+	SDLK_WORLD_7		= 167,
+	SDLK_WORLD_8		= 168,
+	SDLK_WORLD_9		= 169,
+	SDLK_WORLD_10		= 170,
+	SDLK_WORLD_11		= 171,
+	SDLK_WORLD_12		= 172,
+	SDLK_WORLD_13		= 173,
+	SDLK_WORLD_14		= 174,
+	SDLK_WORLD_15		= 175,
+	SDLK_WORLD_16		= 176,
+	SDLK_WORLD_17		= 177,
+	SDLK_WORLD_18		= 178,
+	SDLK_WORLD_19		= 179,
+	SDLK_WORLD_20		= 180,
+	SDLK_WORLD_21		= 181,
+	SDLK_WORLD_22		= 182,
+	SDLK_WORLD_23		= 183,
+	SDLK_WORLD_24		= 184,
+	SDLK_WORLD_25		= 185,
+	SDLK_WORLD_26		= 186,
+	SDLK_WORLD_27		= 187,
+	SDLK_WORLD_28		= 188,
+	SDLK_WORLD_29		= 189,
+	SDLK_WORLD_30		= 190,
+	SDLK_WORLD_31		= 191,
+	SDLK_WORLD_32		= 192,
+	SDLK_WORLD_33		= 193,
+	SDLK_WORLD_34		= 194,
+	SDLK_WORLD_35		= 195,
+	SDLK_WORLD_36		= 196,
+	SDLK_WORLD_37		= 197,
+	SDLK_WORLD_38		= 198,
+	SDLK_WORLD_39		= 199,
+	SDLK_WORLD_40		= 200,
+	SDLK_WORLD_41		= 201,
+	SDLK_WORLD_42		= 202,
+	SDLK_WORLD_43		= 203,
+	SDLK_WORLD_44		= 204,
+	SDLK_WORLD_45		= 205,
+	SDLK_WORLD_46		= 206,
+	SDLK_WORLD_47		= 207,
+	SDLK_WORLD_48		= 208,
+	SDLK_WORLD_49		= 209,
+	SDLK_WORLD_50		= 210,
+	SDLK_WORLD_51		= 211,
+	SDLK_WORLD_52		= 212,
+	SDLK_WORLD_53		= 213,
+	SDLK_WORLD_54		= 214,
+	SDLK_WORLD_55		= 215,
+	SDLK_WORLD_56		= 216,
+	SDLK_WORLD_57		= 217,
+	SDLK_WORLD_58		= 218,
+	SDLK_WORLD_59		= 219,
+	SDLK_WORLD_60		= 220,
+	SDLK_WORLD_61		= 221,
+	SDLK_WORLD_62		= 222,
+	SDLK_WORLD_63		= 223,
+	SDLK_WORLD_64		= 224,
+	SDLK_WORLD_65		= 225,
+	SDLK_WORLD_66		= 226,
+	SDLK_WORLD_67		= 227,
+	SDLK_WORLD_68		= 228,
+	SDLK_WORLD_69		= 229,
+	SDLK_WORLD_70		= 230,
+	SDLK_WORLD_71		= 231,
+	SDLK_WORLD_72		= 232,
+	SDLK_WORLD_73		= 233,
+	SDLK_WORLD_74		= 234,
+	SDLK_WORLD_75		= 235,
+	SDLK_WORLD_76		= 236,
+	SDLK_WORLD_77		= 237,
+	SDLK_WORLD_78		= 238,
+	SDLK_WORLD_79		= 239,
+	SDLK_WORLD_80		= 240,
+	SDLK_WORLD_81		= 241,
+	SDLK_WORLD_82		= 242,
+	SDLK_WORLD_83		= 243,
+	SDLK_WORLD_84		= 244,
+	SDLK_WORLD_85		= 245,
+	SDLK_WORLD_86		= 246,
+	SDLK_WORLD_87		= 247,
+	SDLK_WORLD_88		= 248,
+	SDLK_WORLD_89		= 249,
+	SDLK_WORLD_90		= 250,
+	SDLK_WORLD_91		= 251,
+	SDLK_WORLD_92		= 252,
+	SDLK_WORLD_93		= 253,
+	SDLK_WORLD_94		= 254,
+	SDLK_WORLD_95		= 255,		/* 0xFF */
+
+	/* Numeric keypad */
+	SDLK_KP0		= 256,
+	SDLK_KP1		= 257,
+	SDLK_KP2		= 258,
+	SDLK_KP3		= 259,
+	SDLK_KP4		= 260,
+	SDLK_KP5		= 261,
+	SDLK_KP6		= 262,
+	SDLK_KP7		= 263,
+	SDLK_KP8		= 264,
+	SDLK_KP9		= 265,
+	SDLK_KP_PERIOD		= 266,
+	SDLK_KP_DIVIDE		= 267,
+	SDLK_KP_MULTIPLY	= 268,
+	SDLK_KP_MINUS		= 269,
+	SDLK_KP_PLUS		= 270,
+	SDLK_KP_ENTER		= 271,
+	SDLK_KP_EQUALS		= 272,
+
+	/* Arrows + Home/End pad */
+	SDLK_UP			= 273,
+	SDLK_DOWN		= 274,
+	SDLK_RIGHT		= 275,
+	SDLK_LEFT		= 276,
+	SDLK_INSERT		= 277,
+	SDLK_HOME		= 278,
+	SDLK_END		= 279,
+	SDLK_PAGEUP		= 280,
+	SDLK_PAGEDOWN		= 281,
+
+	/* Function keys */
+	SDLK_F1			= 282,
+	SDLK_F2			= 283,
+	SDLK_F3			= 284,
+	SDLK_F4			= 285,
+	SDLK_F5			= 286,
+	SDLK_F6			= 287,
+	SDLK_F7			= 288,
+	SDLK_F8			= 289,
+	SDLK_F9			= 290,
+	SDLK_F10		= 291,
+	SDLK_F11		= 292,
+	SDLK_F12		= 293,
+	SDLK_F13		= 294,
+	SDLK_F14		= 295,
+	SDLK_F15		= 296,
+
+	/* Key state modifier keys */
+	SDLK_NUMLOCK		= 300,
+	SDLK_CAPSLOCK		= 301,
+	SDLK_SCROLLOCK		= 302,
+	SDLK_RSHIFT		= 303,
+	SDLK_LSHIFT		= 304,
+	SDLK_RCTRL		= 305,
+	SDLK_LCTRL		= 306,
+	SDLK_RALT		= 307,
+	SDLK_LALT		= 308,
+	SDLK_RMETA		= 309,
+	SDLK_LMETA		= 310,
+	SDLK_LSUPER		= 311,		/* Left "Windows" key */
+	SDLK_RSUPER		= 312,		/* Right "Windows" key */
+	SDLK_MODE		= 313,		/* "Alt Gr" key */
+	SDLK_COMPOSE		= 314,		/* Multi-key compose key */
+
+	/* Miscellaneous function keys */
+	SDLK_HELP		= 315,
+	SDLK_PRINT		= 316,
+	SDLK_SYSREQ		= 317,
+	SDLK_BREAK		= 318,
+	SDLK_MENU		= 319,
+	SDLK_POWER		= 320,		/* Power Macintosh power key */
+	SDLK_EURO		= 321,		/* Some european keyboards */
+	SDLK_UNDO		= 322,		/* Atari keyboard has Undo */
+
+	/* Add any other keys here */
+
+	SDLK_LAST
+}
+
+/* Enumeration of valid key mods (possibly OR'd together) */
+alias int SDLMod;
+enum {
+	KMOD_NONE  = 0x0000,
+	KMOD_LSHIFT= 0x0001,
+	KMOD_RSHIFT= 0x0002,
+	KMOD_LCTRL = 0x0040,
+	KMOD_RCTRL = 0x0080,
+	KMOD_LALT  = 0x0100,
+	KMOD_RALT  = 0x0200,
+	KMOD_LMETA = 0x0400,
+	KMOD_RMETA = 0x0800,
+	KMOD_NUM   = 0x1000,
+	KMOD_CAPS  = 0x2000,
+	KMOD_MODE  = 0x4000,
+	KMOD_RESERVED = 0x8000
+}
+
+const uint KMOD_CTRL	= (KMOD_LCTRL|KMOD_RCTRL);
+const uint KMOD_SHIFT	= (KMOD_LSHIFT|KMOD_RSHIFT);
+const uint KMOD_ALT		= (KMOD_LALT|KMOD_RALT);
+const uint KMOD_META	= (KMOD_LMETA|KMOD_RMETA);
diff -Naur z-lock/import/SDL_Version.d z-lock-gentoo/import/SDL_Version.d
--- z-lock/import/SDL_Version.d	1970-01-01 01:00:00.000000000 +0100
+++ z-lock-gentoo/import/SDL_Version.d	2003-12-06 12:47:54.000000000 +0100
@@ -0,0 +1,75 @@
+/*
+    SDL - Simple DirectMedia Layer
+    Copyright (C) 1997, 1998, 1999, 2000, 2001  Sam Lantinga
+
+    This library is free software; you can redistribute it and/or
+    modify it under the terms of the GNU Library General Public
+    License as published by the Free Software Foundation; either
+    version 2 of the License, or (at your option) any later version.
+
+    This library is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+    Library General Public License for more details.
+
+    You should have received a copy of the GNU Library General Public
+    License along with this library; if not, write to the Free
+    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+
+    Sam Lantinga
+    slouken@devolution.com
+*/
+
+/* This header defines the current SDL version */
+
+import SDL_types;
+
+extern(C):
+
+/* Printable format: "%d.%d.%d", MAJOR, MINOR, PATCHLEVEL
+*/
+const uint SDL_MAJOR_VERSION	= 1;
+const uint SDL_MINOR_VERSION	= 2;
+const uint SDL_PATCHLEVEL		= 6;
+
+struct SDL_version {
+	Uint8 major;
+	Uint8 minor;
+	Uint8 patch;
+}
+
+/* This macro can be used to fill a version structure with the compile-time
+ * version of the SDL library.
+ */
+void SDL_VERSION(SDL_version* X)
+{
+	X.major = SDL_MAJOR_VERSION;
+	X.minor = SDL_MINOR_VERSION;
+	X.patch = SDL_PATCHLEVEL;
+}
+
+/* This macro turns the version numbers into a numeric value:
+   (1,2,3) -> (1203)
+   This assumes that there will never be more than 100 patchlevels
+*/
+uint SDL_VERSIONNUM(Uint8 X, Uint8 Y, Uint8 Z)
+{
+	return X * 1000 + Y * 100 + Z;
+}
+
+/* This is the version number macro for the current SDL version */
+const uint SDL_COMPILEDVERSION = SDL_MAJOR_VERSION * 1000 +
+									SDL_MINOR_VERSION * 100 +
+									SDL_PATCHLEVEL;
+
+/* This macro will evaluate to true if compiled with SDL at least X.Y.Z */
+bit SDL_VERSION_ATLEAST(Uint8 X, Uint8 Y, Uint8 Z)
+{
+	return (SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z));
+}
+
+/* This function gets the version of the dynamically linked SDL library.
+   it should NOT be used to fill a version structure, instead you should
+   use the SDL_Version() macro.
+ */
+SDL_version * SDL_Linked_Version();
diff -Naur z-lock/import/SDL_events.d z-lock-gentoo/import/SDL_events.d
--- z-lock/import/SDL_events.d	2004-12-02 15:48:16.000000000 +0100
+++ z-lock-gentoo/import/SDL_events.d	2002-01-04 15:59:20.000000000 +0100
@@ -304,7 +304,7 @@
   If 'state' is set to SDL_QUERY, SDL_EventState() will return the 
   current processing state of the specified event.
 */
-const int SDL_QUERY	= -1;
+const uint SDL_QUERY	= -1;
 const uint SDL_IGNORE	= 0;
 const uint SDL_DISABLE	= 0;
 const uint SDL_ENABLE	= 1;
diff -Naur z-lock/import/SDL_keysym.d z-lock-gentoo/import/SDL_keysym.d
--- z-lock/import/SDL_keysym.d	2002-01-04 15:31:22.000000000 +0100
+++ z-lock-gentoo/import/SDL_keysym.d	1970-01-01 01:00:00.000000000 +0100
@@ -1,308 +0,0 @@
-/*
-    SDL - Simple DirectMedia Layer
-    Copyright (C) 1997, 1998, 1999, 2000, 2001  Sam Lantinga
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public
-    License along with this library; if not, write to the Free
-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-    Sam Lantinga
-    slouken@devolution.com
-*/
-
-/* What we really want is a mapping of every raw key on the keyboard.
-   To support international keyboards, we use the range 0xA1 - 0xFF
-   as international virtual keycodes.  We'll follow in the footsteps of X11...
-   The names of the keys
- */
- 
-alias int SDLKey;
-enum {
-	/* The keyboard syms have been cleverly chosen to map to ASCII */
-	SDLK_UNKNOWN		= 0,
-	SDLK_FIRST		= 0,
-	SDLK_BACKSPACE		= 8,
-	SDLK_TAB		= 9,
-	SDLK_CLEAR		= 12,
-	SDLK_RETURN		= 13,
-	SDLK_PAUSE		= 19,
-	SDLK_ESCAPE		= 27,
-	SDLK_SPACE		= 32,
-	SDLK_EXCLAIM		= 33,
-	SDLK_QUOTEDBL		= 34,
-	SDLK_HASH		= 35,
-	SDLK_DOLLAR		= 36,
-	SDLK_AMPERSAND		= 38,
-	SDLK_QUOTE		= 39,
-	SDLK_LEFTPAREN		= 40,
-	SDLK_RIGHTPAREN		= 41,
-	SDLK_ASTERISK		= 42,
-	SDLK_PLUS		= 43,
-	SDLK_COMMA		= 44,
-	SDLK_MINUS		= 45,
-	SDLK_PERIOD		= 46,
-	SDLK_SLASH		= 47,
-	SDLK_0			= 48,
-	SDLK_1			= 49,
-	SDLK_2			= 50,
-	SDLK_3			= 51,
-	SDLK_4			= 52,
-	SDLK_5			= 53,
-	SDLK_6			= 54,
-	SDLK_7			= 55,
-	SDLK_8			= 56,
-	SDLK_9			= 57,
-	SDLK_COLON		= 58,
-	SDLK_SEMICOLON		= 59,
-	SDLK_LESS		= 60,
-	SDLK_EQUALS		= 61,
-	SDLK_GREATER		= 62,
-	SDLK_QUESTION		= 63,
-	SDLK_AT			= 64,
-	/* 
-	   Skip uppercase letters
-	 */
-	SDLK_LEFTBRACKET	= 91,
-	SDLK_BACKSLASH		= 92,
-	SDLK_RIGHTBRACKET	= 93,
-	SDLK_CARET		= 94,
-	SDLK_UNDERSCORE		= 95,
-	SDLK_BACKQUOTE		= 96,
-	SDLK_a			= 97,
-	SDLK_b			= 98,
-	SDLK_c			= 99,
-	SDLK_d			= 100,
-	SDLK_e			= 101,
-	SDLK_f			= 102,
-	SDLK_g			= 103,
-	SDLK_h			= 104,
-	SDLK_i			= 105,
-	SDLK_j			= 106,
-	SDLK_k			= 107,
-	SDLK_l			= 108,
-	SDLK_m			= 109,
-	SDLK_n			= 110,
-	SDLK_o			= 111,
-	SDLK_p			= 112,
-	SDLK_q			= 113,
-	SDLK_r			= 114,
-	SDLK_s			= 115,
-	SDLK_t			= 116,
-	SDLK_u			= 117,
-	SDLK_v			= 118,
-	SDLK_w			= 119,
-	SDLK_x			= 120,
-	SDLK_y			= 121,
-	SDLK_z			= 122,
-	SDLK_DELETE		= 127,
-	/* End of ASCII mapped keysyms */
-
-	/* International keyboard syms */
-	SDLK_WORLD_0		= 160,		/* 0xA0 */
-	SDLK_WORLD_1		= 161,
-	SDLK_WORLD_2		= 162,
-	SDLK_WORLD_3		= 163,
-	SDLK_WORLD_4		= 164,
-	SDLK_WORLD_5		= 165,
-	SDLK_WORLD_6		= 166,
-	SDLK_WORLD_7		= 167,
-	SDLK_WORLD_8		= 168,
-	SDLK_WORLD_9		= 169,
-	SDLK_WORLD_10		= 170,
-	SDLK_WORLD_11		= 171,
-	SDLK_WORLD_12		= 172,
-	SDLK_WORLD_13		= 173,
-	SDLK_WORLD_14		= 174,
-	SDLK_WORLD_15		= 175,
-	SDLK_WORLD_16		= 176,
-	SDLK_WORLD_17		= 177,
-	SDLK_WORLD_18		= 178,
-	SDLK_WORLD_19		= 179,
-	SDLK_WORLD_20		= 180,
-	SDLK_WORLD_21		= 181,
-	SDLK_WORLD_22		= 182,
-	SDLK_WORLD_23		= 183,
-	SDLK_WORLD_24		= 184,
-	SDLK_WORLD_25		= 185,
-	SDLK_WORLD_26		= 186,
-	SDLK_WORLD_27		= 187,
-	SDLK_WORLD_28		= 188,
-	SDLK_WORLD_29		= 189,
-	SDLK_WORLD_30		= 190,
-	SDLK_WORLD_31		= 191,
-	SDLK_WORLD_32		= 192,
-	SDLK_WORLD_33		= 193,
-	SDLK_WORLD_34		= 194,
-	SDLK_WORLD_35		= 195,
-	SDLK_WORLD_36		= 196,
-	SDLK_WORLD_37		= 197,
-	SDLK_WORLD_38		= 198,
-	SDLK_WORLD_39		= 199,
-	SDLK_WORLD_40		= 200,
-	SDLK_WORLD_41		= 201,
-	SDLK_WORLD_42		= 202,
-	SDLK_WORLD_43		= 203,
-	SDLK_WORLD_44		= 204,
-	SDLK_WORLD_45		= 205,
-	SDLK_WORLD_46		= 206,
-	SDLK_WORLD_47		= 207,
-	SDLK_WORLD_48		= 208,
-	SDLK_WORLD_49		= 209,
-	SDLK_WORLD_50		= 210,
-	SDLK_WORLD_51		= 211,
-	SDLK_WORLD_52		= 212,
-	SDLK_WORLD_53		= 213,
-	SDLK_WORLD_54		= 214,
-	SDLK_WORLD_55		= 215,
-	SDLK_WORLD_56		= 216,
-	SDLK_WORLD_57		= 217,
-	SDLK_WORLD_58		= 218,
-	SDLK_WORLD_59		= 219,
-	SDLK_WORLD_60		= 220,
-	SDLK_WORLD_61		= 221,
-	SDLK_WORLD_62		= 222,
-	SDLK_WORLD_63		= 223,
-	SDLK_WORLD_64		= 224,
-	SDLK_WORLD_65		= 225,
-	SDLK_WORLD_66		= 226,
-	SDLK_WORLD_67		= 227,
-	SDLK_WORLD_68		= 228,
-	SDLK_WORLD_69		= 229,
-	SDLK_WORLD_70		= 230,
-	SDLK_WORLD_71		= 231,
-	SDLK_WORLD_72		= 232,
-	SDLK_WORLD_73		= 233,
-	SDLK_WORLD_74		= 234,
-	SDLK_WORLD_75		= 235,
-	SDLK_WORLD_76		= 236,
-	SDLK_WORLD_77		= 237,
-	SDLK_WORLD_78		= 238,
-	SDLK_WORLD_79		= 239,
-	SDLK_WORLD_80		= 240,
-	SDLK_WORLD_81		= 241,
-	SDLK_WORLD_82		= 242,
-	SDLK_WORLD_83		= 243,
-	SDLK_WORLD_84		= 244,
-	SDLK_WORLD_85		= 245,
-	SDLK_WORLD_86		= 246,
-	SDLK_WORLD_87		= 247,
-	SDLK_WORLD_88		= 248,
-	SDLK_WORLD_89		= 249,
-	SDLK_WORLD_90		= 250,
-	SDLK_WORLD_91		= 251,
-	SDLK_WORLD_92		= 252,
-	SDLK_WORLD_93		= 253,
-	SDLK_WORLD_94		= 254,
-	SDLK_WORLD_95		= 255,		/* 0xFF */
-
-	/* Numeric keypad */
-	SDLK_KP0		= 256,
-	SDLK_KP1		= 257,
-	SDLK_KP2		= 258,
-	SDLK_KP3		= 259,
-	SDLK_KP4		= 260,
-	SDLK_KP5		= 261,
-	SDLK_KP6		= 262,
-	SDLK_KP7		= 263,
-	SDLK_KP8		= 264,
-	SDLK_KP9		= 265,
-	SDLK_KP_PERIOD		= 266,
-	SDLK_KP_DIVIDE		= 267,
-	SDLK_KP_MULTIPLY	= 268,
-	SDLK_KP_MINUS		= 269,
-	SDLK_KP_PLUS		= 270,
-	SDLK_KP_ENTER		= 271,
-	SDLK_KP_EQUALS		= 272,
-
-	/* Arrows + Home/End pad */
-	SDLK_UP			= 273,
-	SDLK_DOWN		= 274,
-	SDLK_RIGHT		= 275,
-	SDLK_LEFT		= 276,
-	SDLK_INSERT		= 277,
-	SDLK_HOME		= 278,
-	SDLK_END		= 279,
-	SDLK_PAGEUP		= 280,
-	SDLK_PAGEDOWN		= 281,
-
-	/* Function keys */
-	SDLK_F1			= 282,
-	SDLK_F2			= 283,
-	SDLK_F3			= 284,
-	SDLK_F4			= 285,
-	SDLK_F5			= 286,
-	SDLK_F6			= 287,
-	SDLK_F7			= 288,
-	SDLK_F8			= 289,
-	SDLK_F9			= 290,
-	SDLK_F10		= 291,
-	SDLK_F11		= 292,
-	SDLK_F12		= 293,
-	SDLK_F13		= 294,
-	SDLK_F14		= 295,
-	SDLK_F15		= 296,
-
-	/* Key state modifier keys */
-	SDLK_NUMLOCK		= 300,
-	SDLK_CAPSLOCK		= 301,
-	SDLK_SCROLLOCK		= 302,
-	SDLK_RSHIFT		= 303,
-	SDLK_LSHIFT		= 304,
-	SDLK_RCTRL		= 305,
-	SDLK_LCTRL		= 306,
-	SDLK_RALT		= 307,
-	SDLK_LALT		= 308,
-	SDLK_RMETA		= 309,
-	SDLK_LMETA		= 310,
-	SDLK_LSUPER		= 311,		/* Left "Windows" key */
-	SDLK_RSUPER		= 312,		/* Right "Windows" key */
-	SDLK_MODE		= 313,		/* "Alt Gr" key */
-	SDLK_COMPOSE		= 314,		/* Multi-key compose key */
-
-	/* Miscellaneous function keys */
-	SDLK_HELP		= 315,
-	SDLK_PRINT		= 316,
-	SDLK_SYSREQ		= 317,
-	SDLK_BREAK		= 318,
-	SDLK_MENU		= 319,
-	SDLK_POWER		= 320,		/* Power Macintosh power key */
-	SDLK_EURO		= 321,		/* Some european keyboards */
-	SDLK_UNDO		= 322,		/* Atari keyboard has Undo */
-
-	/* Add any other keys here */
-
-	SDLK_LAST
-}
-
-/* Enumeration of valid key mods (possibly OR'd together) */
-alias int SDLMod;
-enum {
-	KMOD_NONE  = 0x0000,
-	KMOD_LSHIFT= 0x0001,
-	KMOD_RSHIFT= 0x0002,
-	KMOD_LCTRL = 0x0040,
-	KMOD_RCTRL = 0x0080,
-	KMOD_LALT  = 0x0100,
-	KMOD_RALT  = 0x0200,
-	KMOD_LMETA = 0x0400,
-	KMOD_RMETA = 0x0800,
-	KMOD_NUM   = 0x1000,
-	KMOD_CAPS  = 0x2000,
-	KMOD_MODE  = 0x4000,
-	KMOD_RESERVED = 0x8000
-}
-
-const uint KMOD_CTRL	= (KMOD_LCTRL|KMOD_RCTRL);
-const uint KMOD_SHIFT	= (KMOD_LSHIFT|KMOD_RSHIFT);
-const uint KMOD_ALT		= (KMOD_LALT|KMOD_RALT);
-const uint KMOD_META	= (KMOD_LMETA|KMOD_RMETA);
diff -Naur z-lock/import/SDL_version.d z-lock-gentoo/import/SDL_version.d
--- z-lock/import/SDL_version.d	2003-12-06 12:47:54.000000000 +0100
+++ z-lock-gentoo/import/SDL_version.d	1970-01-01 01:00:00.000000000 +0100
@@ -1,75 +0,0 @@
-/*
-    SDL - Simple DirectMedia Layer
-    Copyright (C) 1997, 1998, 1999, 2000, 2001  Sam Lantinga
-
-    This library is free software; you can redistribute it and/or
-    modify it under the terms of the GNU Library General Public
-    License as published by the Free Software Foundation; either
-    version 2 of the License, or (at your option) any later version.
-
-    This library is distributed in the hope that it will be useful,
-    but WITHOUT ANY WARRANTY; without even the implied warranty of
-    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-    Library General Public License for more details.
-
-    You should have received a copy of the GNU Library General Public
-    License along with this library; if not, write to the Free
-    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-
-    Sam Lantinga
-    slouken@devolution.com
-*/
-
-/* This header defines the current SDL version */
-
-import SDL_types;
-
-extern(C):
-
-/* Printable format: "%d.%d.%d", MAJOR, MINOR, PATCHLEVEL
-*/
-const uint SDL_MAJOR_VERSION	= 1;
-const uint SDL_MINOR_VERSION	= 2;
-const uint SDL_PATCHLEVEL		= 6;
-
-struct SDL_version {
-	Uint8 major;
-	Uint8 minor;
-	Uint8 patch;
-}
-
-/* This macro can be used to fill a version structure with the compile-time
- * version of the SDL library.
- */
-void SDL_VERSION(SDL_version* X)
-{
-	X.major = SDL_MAJOR_VERSION;
-	X.minor = SDL_MINOR_VERSION;
-	X.patch = SDL_PATCHLEVEL;
-}
-
-/* This macro turns the version numbers into a numeric value:
-   (1,2,3) -> (1203)
-   This assumes that there will never be more than 100 patchlevels
-*/
-uint SDL_VERSIONNUM(Uint8 X, Uint8 Y, Uint8 Z)
-{
-	return X * 1000 + Y * 100 + Z;
-}
-
-/* This is the version number macro for the current SDL version */
-const uint SDL_COMPILEDVERSION = SDL_MAJOR_VERSION * 1000 +
-									SDL_MINOR_VERSION * 100 +
-									SDL_PATCHLEVEL;
-
-/* This macro will evaluate to true if compiled with SDL at least X.Y.Z */
-bit SDL_VERSION_ATLEAST(Uint8 X, Uint8 Y, Uint8 Z)
-{
-	return (SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z));
-}
-
-/* This function gets the version of the dynamically linked SDL library.
-   it should NOT be used to fill a version structure, instead you should
-   use the SDL_Version() macro.
- */
-SDL_version * SDL_Linked_Version();
diff -Naur z-lock/import/opengl.d z-lock-gentoo/import/opengl.d
--- z-lock/import/opengl.d	2004-01-09 10:52:04.000000000 +0100
+++ z-lock-gentoo/import/opengl.d	2007-09-20 18:25:21.000000000 +0200
@@ -1,10 +1,4 @@
-version (Win32) {
-	private import std.c.windows.windows;
-	extern(Windows):
-}
-version (linux) {
 	extern(C):
-}
 
 alias uint GLenum;
 alias ubyte GLboolean;
@@ -1116,7 +1110,7 @@
 /*************************************************************/
 
 void /*APIENTRY*/glAccum (GLenum op, GLfloat value);
-void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf ref);
+void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf);
 GLboolean /*APIENTRY*/glAreTexturesResident (GLsizei n, GLuint *textures, GLboolean *residences);
 void /*APIENTRY*/glArrayElement (GLint i);
 void /*APIENTRY*/glBegin (GLenum mode);
@@ -1369,7 +1363,7 @@
 void /*APIENTRY*/glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
 void /*APIENTRY*/glSelectBuffer (GLsizei size, GLuint *buffer);
 void /*APIENTRY*/glShadeModel (GLenum mode);
-void /*APIENTRY*/glStencilFunc (GLenum func, GLint ref, GLuint mask);
+void /*APIENTRY*/glStencilFunc (GLenum func, GLint, GLuint mask);
 void /*APIENTRY*/glStencilMask (GLuint mask);
 void /*APIENTRY*/glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
 void /*APIENTRY*/glTexCoord1d (GLdouble s);
diff -Naur z-lock/import/openglu.d z-lock-gentoo/import/openglu.d
--- z-lock/import/openglu.d	2003-12-04 04:15:26.000000000 +0100
+++ z-lock-gentoo/import/openglu.d	2007-09-20 18:25:26.000000000 +0200
@@ -1,11 +1,6 @@
 import opengl;
 
-version (Win32) {
-	extern(Windows):
-}
-version (linux) {
 	extern(C):
-}
 
 GLubyte* gluErrorString (
     GLenum   errCode);
diff -Naur z-lock/src/bulletcommand.d z-lock-gentoo/src/bulletcommand.d
--- z-lock/src/bulletcommand.d	2006-09-08 19:28:18.000000000 +0200
+++ z-lock-gentoo/src/bulletcommand.d	2007-10-10 19:40:03.000000000 +0200
@@ -36,7 +36,7 @@
 
 	buf.length = 256;
 	buf = fname ~ "\0";
-	parser[bank] = BulletMLParserTinyXML_new(buf);
+	parser[bank] = BulletMLParserTinyXML_new(buf.ptr);
 	if(parser[bank]) BulletMLParserTinyXML_parse(parser[bank]);
 	buf.length = 0;
 }
@@ -170,7 +170,8 @@
 		if(eid != -1){
 			TskBuf[eid].parent = BulletCommand.now.id;
 			d = (d <= 180.0f ? d : -(360.0f - d));
-			d = d / ROTVAL;
+			d = d / ROTVAL;
+			TskBuf[eid].roll = 0;
 			TskBuf[eid].bullet_speed = s;
 			TskBuf[eid].bullet_direction = d;
 			TskBuf[eid].bullet_velx = (sin(d) * (-s * VEL_SDM_SS_RATIO));
diff -Naur z-lock/src/luminous.d z-lock-gentoo/src/luminous.d
--- z-lock/src/luminous.d	2006-09-07 18:13:08.000000000 +0200
+++ z-lock-gentoo/src/luminous.d	2007-10-10 19:40:44.000000000 +0200
@@ -7,7 +7,7 @@
 */
 
 private	import std.math;
-private	import std.string;
+private	import std.c.string;
 private	import opengl;
 private	import util_sdl;
 private	import task;
@@ -68,11 +68,11 @@
 
 static void makeLuminousTexture()
 {
-	uint *data = td;
+	uint *data = td.ptr;
 	int i;
 
 	td[0..length] = 0;
-	//memset(data, 0, luminousTextureWidth * luminousTextureHeight * 4 * uint.sizeof);
+	memset(data, 0, luminousTextureWidth * luminousTextureHeight * 4 * uint.sizeof);
 	glGenTextures(1, &luminousTexture);
 	glBindTexture(GL_TEXTURE_2D, luminousTexture);
 	glTexImage2D(GL_TEXTURE_2D, 0, 4, luminousTextureWidth, luminousTextureHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);
diff -Naur z-lock/src/main.d z-lock-gentoo/src/main.d
--- z-lock/src/main.d	2005-12-03 14:53:36.000000000 +0100
+++ z-lock-gentoo/src/main.d	2007-09-26 20:22:34.000000000 +0200
@@ -6,13 +6,12 @@
 	2003/11/28 jumpei isshiki
 */
 
-private	import	std.c.windows.windows;
+//private	import	std.c.windows.windows;
 private	import	std.stdio;
 private	import	std.string;
 private	import	std.random;
 private	import	SDL;
 private	import	opengl;
-private	import	reflection;
 private	import	util_sdl;
 private	import	util_glbf;
 private	import	util_pad;
@@ -64,8 +63,8 @@
 				str_buf[i] = lpCmdLine[i];
 			}
 			split_buf = split(str_buf);
-			if(split_buf[0].length > 1) Reflection.init(split_buf[0]);
-			else						Reflection.init("main.exe");
+//			if(split_buf[0].length > 1) Reflection.init(split_buf[0]);
+//			else						Reflection.init("main.exe");
 		}
 
 		try{
@@ -83,7 +82,7 @@
 }else{
 	int main(char[][] argv)
 	{
-		Reflection.init(argv[argv.length-1]);
+//		Reflection.init(argv[argv.length-1]);
 		return boot();
 	}
 }
@@ -154,7 +153,7 @@
 	setTSK(GROUP_00,&TSKgctrl);
 
 	while(game_exec){
-		SDL_PollEvent(&event);
+		SDL_PollEvent (&event);
 		getPAD();
 		if((game_exec == 1 && (trgs & PAD_BUTTON9)) || event.type == SDL_QUIT){
 			game_exec = 0;
@@ -238,7 +237,7 @@
 {
 	int	prev;
 
-	ship_level = 0.0f;
+//	ship_level = 0.0f;
 
 	if(TskBuf[ship_id].tskid != 0 && TskBuf[ship_id].fp_int) collision_sub2(ship_id, GROUP_02);
 	if(TskBuf[ship_id].tskid != 0 && TskBuf[ship_id].fp_int) collision_sub3(ship_id, GROUP_06);
diff -Naur z-lock/src/task.d z-lock-gentoo/src/task.d
--- z-lock/src/task.d	2006-09-08 19:11:52.000000000 +0200
+++ z-lock-gentoo/src/task.d	2007-10-10 19:42:09.000000000 +0200
@@ -135,7 +135,8 @@
 	GROUP_06,
 	GROUP_07,
 	GROUP_08,
-	GROUP_MAX,
+	GROUP_MAX,
+	GROUP_SSHOT = GROUP_03,
 
 }
 
@@ -184,7 +185,9 @@
 		TskBuf[i].fp_exit = null;
 		TskBuf[i].image = null;
 		TskBuf[i].bullet_command = null;
-		TskBuf[i].bullet_state = null;
+		TskBuf[i].bullet_state = null;
+	        TskBuf[i].bullet_accx = 0;
+	        TskBuf[i].bullet_accy = 0;
 	}
 	TskBuf[i].tskid = TSKID_NONE;
 	TskBuf[i].entry = -1;
diff -Naur z-lock/src/title.d z-lock-gentoo/src/title.d
--- z-lock/src/title.d	2006-09-08 18:53:36.000000000 +0200
+++ z-lock-gentoo/src/title.d	2007-09-07 13:00:04.000000000 +0200
@@ -510,7 +510,8 @@
 			str_buf.length = 0;
 			clrTSK(id);
 			break;
-	}
+	}
+	return;
 }
 
 void TSKtitleDraw(int id)
diff -Naur z-lock/src/util_snd.d z-lock-gentoo/src/util_snd.d
--- z-lock/src/util_snd.d	2005-08-24 17:11:26.000000000 +0200
+++ z-lock-gentoo/src/util_snd.d	2007-10-10 19:43:24.000000000 +0200
@@ -99,7 +99,7 @@
 
 	char[] fileName = name ~ "\0";
 
-	music[ch] = Mix_LoadMUS(fileName);
+	music[ch] = Mix_LoadMUS(fileName.ptr);
 	if(!music[ch]){
 		sound_use = false;
 	}else{
@@ -118,7 +118,7 @@
 
 	char[] fileName = name ~ "\0";
 
-	chunk[bank] = Mix_LoadWAV(fileName);
+	chunk[bank] = Mix_LoadWAV(fileName.ptr);
 	if(!chunk[bank]){
 		sound_use = false;
 	}
