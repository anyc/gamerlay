diff -Naur z-lock/import/opengl.d z-lock-p/import/opengl.d
--- z-lock/import/opengl.d	2004-01-09 10:52:04.000000000 +0100
+++ z-lock-p/import/opengl.d	2009-08-28 13:30:51.000000000 +0200
@@ -1,10 +1,4 @@
-version (Win32) {
-	private import std.c.windows.windows;
-	extern(Windows):
-}
-version (linux) {
 	extern(C):
-}
 
 alias uint GLenum;
 alias ubyte GLboolean;
@@ -1116,7 +1110,7 @@
 /*************************************************************/
 
 void /*APIENTRY*/glAccum (GLenum op, GLfloat value);
-void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf ref);
+void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf);
 GLboolean /*APIENTRY*/glAreTexturesResident (GLsizei n, GLuint *textures, GLboolean *residences);
 void /*APIENTRY*/glArrayElement (GLint i);
 void /*APIENTRY*/glBegin (GLenum mode);
@@ -1369,7 +1363,7 @@
 void /*APIENTRY*/glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
 void /*APIENTRY*/glSelectBuffer (GLsizei size, GLuint *buffer);
 void /*APIENTRY*/glShadeModel (GLenum mode);
-void /*APIENTRY*/glStencilFunc (GLenum func, GLint ref, GLuint mask);
+void /*APIENTRY*/glStencilFunc (GLenum func, GLint, GLuint mask);
 void /*APIENTRY*/glStencilMask (GLuint mask);
 void /*APIENTRY*/glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
 void /*APIENTRY*/glTexCoord1d (GLdouble s);
diff -Naur z-lock/import/openglu.d z-lock-p/import/openglu.d
--- z-lock/import/openglu.d	2003-12-04 04:15:26.000000000 +0100
+++ z-lock-p/import/openglu.d	2009-08-28 13:30:51.000000000 +0200
@@ -1,11 +1,6 @@
 import opengl;
 
-version (Win32) {
-	extern(Windows):
-}
-version (linux) {
 	extern(C):
-}
 
 GLubyte* gluErrorString (
     GLenum   errCode);
diff -Naur z-lock/import/SDL.d z-lock-p/import/SDL.d
--- z-lock/import/SDL.d	2004-05-08 14:14:14.000000000 +0200
+++ z-lock-p/import/SDL.d	2009-08-28 13:30:51.000000000 +0200
@@ -20,73 +20,76 @@
     slouken@devolution.com
 */
 
-import SDL_types;
-import SDL_getenv;
-import SDL_error;
-import SDL_rwops;
-import SDL_timer;
-import SDL_audio;
-import SDL_cdrom;
-import SDL_joystick;
-import SDL_events;
-import SDL_video;
-import SDL_byteorder;
-import SDL_Version;
-
-extern(C):
-
-/* As of version 0.5, SDL is loaded dynamically into the application */
-
-/* These are the flags which may be passed to SDL_Init() -- you should
-   specify the subsystems which you will be using in your application.
-*/
-const uint SDL_INIT_TIMER		= 0x00000001;
-const uint SDL_INIT_AUDIO		= 0x00000010;
-const uint SDL_INIT_VIDEO		= 0x00000020;
-const uint SDL_INIT_CDROM		= 0x00000100;
-const uint SDL_INIT_JOYSTICK	= 0x00000200;
-const uint SDL_INIT_NOPARACHUTE	= 0x00100000;	/* Don't catch fatal signals */
-const uint SDL_INIT_EVENTTHREAD	= 0x01000000;	/* Not supported on all OS's */
-const uint SDL_INIT_EVERYTHING	= 0x0000FFFF;
-
-/* This function loads the SDL dynamically linked library and initializes 
- * the subsystems specified by 'flags' (and those satisfying dependencies)
- * Unless the SDL_INIT_NOPARACHUTE flag is set, it will install cleanup
- * signal handlers for some commonly ignored fatal signals (like SIGSEGV)
- */
-int SDL_Init(Uint32 flags);
-
-/* This function initializes specific SDL subsystems */
-int SDL_InitSubSystem(Uint32 flags);
-
-/* This function cleans up specific SDL subsystems */
-void SDL_QuitSubSystem(Uint32 flags);
-
-/* This function returns mask of the specified subsystems which have
-   been initialized.
-   If 'flags' is 0, it returns a mask of all initialized subsystems.
-*/
-Uint32 SDL_WasInit(Uint32 flags);
-
-/* This function cleans up all initialized subsystems and unloads the
- * dynamically linked library.  You should call it upon all exit conditions.
- */
-void SDL_Quit();
-
-void SDL_SetModuleHandle(void *hInst);
-//extern(Windows) void* GetModuleHandle(char*);
-extern(Windows) void* GetModuleHandleA(char*);
-
-static this()
-{
-	/* Load SDL dynamic link library */
-	if (SDL_Init(SDL_INIT_NOPARACHUTE) < 0)
-		throw new Error("Error loading SDL");
-//	SDL_SetModuleHandle(GetModuleHandle(null));
-	SDL_SetModuleHandle(GetModuleHandleA(null));
-}
-
-static ~this()
-{
-	SDL_Quit();
-}
+public import SDL_types;
+public import SDL_getenv;
+public import SDL_error;
+public import SDL_rwops;
+public import SDL_timer;
+public import SDL_audio;
+public import SDL_cdrom;
+public import SDL_joystick;
+public import SDL_events;
+public import SDL_video;
+public import SDL_byteorder;
+public import SDL_Version;
+public import SDL_Keysym;
+public import SDL_keyboard;
+public import SDL_mouse;
+
+extern(C):
+
+/* As of version 0.5, SDL is loaded dynamically into the application */
+
+/* These are the flags which may be passed to SDL_Init() -- you should
+   specify the subsystems which you will be using in your application.
+*/
+const uint SDL_INIT_TIMER		= 0x00000001;
+const uint SDL_INIT_AUDIO		= 0x00000010;
+const uint SDL_INIT_VIDEO		= 0x00000020;
+const uint SDL_INIT_CDROM		= 0x00000100;
+const uint SDL_INIT_JOYSTICK	= 0x00000200;
+const uint SDL_INIT_NOPARACHUTE	= 0x00100000;	/* Don't catch fatal signals */
+const uint SDL_INIT_EVENTTHREAD	= 0x01000000;	/* Not supported on all OS's */
+const uint SDL_INIT_EVERYTHING	= 0x0000FFFF;
+
+/* This function loads the SDL dynamically linked library and initializes 
+ * the subsystems specified by 'flags' (and those satisfying dependencies)
+ * Unless the SDL_INIT_NOPARACHUTE flag is set, it will install cleanup
+ * signal handlers for some commonly ignored fatal signals (like SIGSEGV)
+ */
+int SDL_Init(Uint32 flags);
+
+/* This function initializes specific SDL subsystems */
+int SDL_InitSubSystem(Uint32 flags);
+
+/* This function cleans up specific SDL subsystems */
+void SDL_QuitSubSystem(Uint32 flags);
+
+/* This function returns mask of the specified subsystems which have
+   been initialized.
+   If 'flags' is 0, it returns a mask of all initialized subsystems.
+*/
+Uint32 SDL_WasInit(Uint32 flags);
+
+/* This function cleans up all initialized subsystems and unloads the
+ * dynamically linked library.  You should call it upon all exit conditions.
+ */
+void SDL_Quit();
+
+/+
+void SDL_SetModuleHandle(void *hInst);
+extern(Windows) void* GetModuleHandle(char*);
+
+static this()
+{
+	/* Load SDL dynamic link library */
+	if (SDL_Init(SDL_INIT_NOPARACHUTE) < 0)
+		throw new Error("Error loading SDL");
+	SDL_SetModuleHandle(GetModuleHandle(null));
+}
+
+static ~this()
+{
+	SDL_Quit();
+}
++/
diff -Naur z-lock/import/SDL_events.d z-lock-p/import/SDL_events.d
--- z-lock/import/SDL_events.d	2004-12-02 15:48:16.000000000 +0100
+++ z-lock-p/import/SDL_events.d	2009-08-28 13:30:51.000000000 +0200
@@ -304,7 +304,7 @@
   If 'state' is set to SDL_QUERY, SDL_EventState() will return the 
   current processing state of the specified event.
 */
-const int SDL_QUERY	= -1;
+const uint SDL_QUERY	= -1;
 const uint SDL_IGNORE	= 0;
 const uint SDL_DISABLE	= 0;
 const uint SDL_ENABLE	= 1;
