diff -Naur projectL_1001/import/opengl.d projectL_1001-gentoo/import/opengl.d
--- projectL_1001/import/opengl.d	2005-03-11 01:43:08.000000000 +0100
+++ projectL_1001-gentoo/import/opengl.d	2007-09-20 08:28:17.000000000 +0200
@@ -1,10 +1,4 @@
-version (Win32) {
-	private import std.c.windows.windows;
-	extern(Windows):
-}
-else {
 	extern(C):
-}
 
 alias uint GLenum;
 alias ubyte GLboolean;
@@ -1116,7 +1110,7 @@
 /*************************************************************/
 
 void /*APIENTRY*/glAccum (GLenum op, GLfloat value);
-void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf ref);
+void /*APIENTRY*/glAlphaFunc (GLenum func, GLclampf);
 GLboolean /*APIENTRY*/glAreTexturesResident (GLsizei n, GLuint *textures, GLboolean *residences);
 void /*APIENTRY*/glArrayElement (GLint i);
 void /*APIENTRY*/glBegin (GLenum mode);
@@ -1369,7 +1363,7 @@
 void /*APIENTRY*/glScissor (GLint x, GLint y, GLsizei width, GLsizei height);
 void /*APIENTRY*/glSelectBuffer (GLsizei size, GLuint *buffer);
 void /*APIENTRY*/glShadeModel (GLenum mode);
-void /*APIENTRY*/glStencilFunc (GLenum func, GLint ref, GLuint mask);
+void /*APIENTRY*/glStencilFunc (GLenum func, GLint, GLuint mask);
 void /*APIENTRY*/glStencilMask (GLuint mask);
 void /*APIENTRY*/glStencilOp (GLenum fail, GLenum zfail, GLenum zpass);
 void /*APIENTRY*/glTexCoord1d (GLdouble s);
diff -Naur projectL_1001/import/openglu.d projectL_1001-gentoo/import/openglu.d
--- projectL_1001/import/openglu.d	2005-03-11 01:43:20.000000000 +0100
+++ projectL_1001-gentoo/import/openglu.d	2007-09-20 08:28:23.000000000 +0200
@@ -1,11 +1,6 @@
 import opengl;
 
-version (Win32) {
-	extern(Windows):
-}
-else {
 	extern(C):
-}
 
 GLubyte* gluErrorString (
     GLenum   errCode);
diff -Naur projectL_1001/Makefile projectL_1001-gentoo/Makefile
--- projectL_1001/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ projectL_1001-gentoo/Makefile	2007-09-20 08:27:46.000000000 +0200
@@ -0,0 +1,21 @@
+DSRC=$(shell find src -name "*.d")
+SOURCES=$(DSRC) import/SDL_video.d import/SDL_mixer.d
+OBJS=$(SOURCES:.d=.o)
+CFLAGS=
+DFLAGS=-O -debug -Iimport -Isrc -I/usr/X11R6/include/
+EXE=projectL
+
+
+all: $(EXE)
+
+$(EXE): import/SDL_keysym.d $(OBJS) 
+	gcc $(CFLAGS) -o $@ $(OBJS) -lbulletml_d -L/usr/local/lib -L/usr/lib -lgphobos -lpthread -lGLU -lGL -lglut -lm -lstdc++ -lSDL -lSDL_mixer
+
+$(OBJS): %.o: %.d
+	gdmd -d -c -of$@ $(DFLAGS) $<
+
+clean: 	rm src/*.o
+	rm src/br/*.o
+	rm src/util/*.o
+	rm src/util/sdl/*.o
+	rm -r import/*.o
diff -Naur projectL_1001/src/br/boot.d projectL_1001-gentoo/src/br/boot.d
--- projectL_1001/src/br/boot.d	2006-11-18 20:38:22.000000000 +0100
+++ projectL_1001-gentoo/src/br/boot.d	2007-09-20 08:27:46.000000000 +0200
@@ -6,8 +6,10 @@
 private Key key;
 
 
-private:
-import std.c.windows.windows;
+version (Win32_release) {
+  // Boot as the Windows executable.
+  private import std.c.windows.windows;
+  private import std.string;
 
 extern (C) void gc_init();
 extern (C) void gc_term();
@@ -37,6 +39,20 @@
 	gc_term();
 	return result;
 }
+} else {
+  // Boot as the general executable.
+  public int main(char[][] args) {
+    return boot(args);
+  }
+}
+
+public int boot(char[][] args) {
+ 	double d;
+	key = new Key();
+	mainloop = new Mainloop(key);
+	mainloop.loop();
+	return 0;
+}
 
 int user_start(){
 	double d;
diff -Naur projectL_1001/src/br/enemy.d projectL_1001-gentoo/src/br/enemy.d
--- projectL_1001/src/br/enemy.d	2007-01-28 12:24:14.000000000 +0100
+++ projectL_1001-gentoo/src/br/enemy.d	2007-09-20 08:27:46.000000000 +0200
@@ -1,5 +1,5 @@
 module br.enemy;
-private import str = std.string;
+private import std.string;
 private import util.parts;
 private import util.shape;
 private import util.vector;
@@ -182,7 +182,7 @@
 			case collisionManager.kind.SWORD:
 			
 			double d;
-			d = 1.0;//0.5 + 0.6 * fmin(1.0 ,fmax(0.0 ,(ship.laserSpeed - ship.laserMinSpeed) / (ship.laserMaxSpeed - ship.laserMinSpeed)));
+			d = 0.5 + 0.6 * fmin(1.0 ,fmax(0.0 ,(ship.laserSpeed - ship.laserMinSpeed) / (ship.laserMaxSpeed - ship.laserMinSpeed)));
 			if(vincible){
 				hp = hp - d;//fmax(ceil(hp-1.0) ,hp - d);
 				if(hp <= 0)destroy();
diff -Naur projectL_1001/src/br/enemyImpl.d projectL_1001-gentoo/src/br/enemyImpl.d
--- projectL_1001/src/br/enemyImpl.d	2006-12-22 12:56:32.000000000 +0100
+++ projectL_1001-gentoo/src/br/enemyImpl.d	2007-09-20 08:27:46.000000000 +0200
@@ -1,5 +1,5 @@
 module br.enemyImpl;
-private import str = std.string;
+private import std.string;
 private import util.basis;
 private import util.parts;
 private import util.shape;
@@ -2465,14 +2465,14 @@
 		
 		
 		for(int i = 0;i < 5;i ++){
-			char[] rw0 = "rWing_"~str.toString(i)~"_"~str.toString(0);
-			char[] rw1 = "rWing_"~str.toString(i)~"_"~str.toString(1);
-			char[] rw2 = "rWing_"~str.toString(i)~"_"~str.toString(2);
-			char[] rw3 = "rWing_"~str.toString(i)~"_"~str.toString(3);
-			char[] lw0 = "lWing_"~str.toString(i)~"_"~str.toString(0);
-			char[] lw1 = "lWing_"~str.toString(i)~"_"~str.toString(1);
-			char[] lw2 = "lWing_"~str.toString(i)~"_"~str.toString(2);
-			char[] lw3 = "lWing_"~str.toString(i)~"_"~str.toString(3);
+			char[] rw0 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(0);
+			char[] rw1 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(1);
+			char[] rw2 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(2);
+			char[] rw3 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(3);
+			char[] lw0 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(0);
+			char[] lw1 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(1);
+			char[] lw2 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(2);
+			char[] lw3 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(3);
 			p = new EnemyAppend(Wing.getShape() ,30 ,-1);//p = new Wing();
 			(cast(Enemy)p).disableBorder();
 			//partsManager.add(append);
@@ -2510,8 +2510,8 @@
 		
 		
 		for(int i = 1;i < 4;i ++){
-			char[] t1 = "tail_"~str.toString(i-1);
-			char[] t2 = "tail_"~str.toString(i);
+			char[] t1 = "tail_"~std.string.toString(i-1);
+			char[] t2 = "tail_"~std.string.toString(i);
 			p = new EnemyAppend(Tail.getShape() ,30 ,-1);//p = new Tail();
 			(cast(Enemy)p).disableBorder();
 			childHash[t1].addChild(p ,t2 ,60 ,ENGAGED);
@@ -4553,12 +4553,12 @@
 		
 		
 		for(int i = 0;i < 5;i ++){
-			char[] rw0 = "rWing_"~str.toString(i)~"_"~str.toString(0);
-			char[] rw1 = "rWing_"~str.toString(i)~"_"~str.toString(1);
-			char[] rw2 = "rWing_"~str.toString(i)~"_"~str.toString(2);
-			char[] lw0 = "lWing_"~str.toString(i)~"_"~str.toString(0);
-			char[] lw1 = "lWing_"~str.toString(i)~"_"~str.toString(1);
-			char[] lw2 = "lWing_"~str.toString(i)~"_"~str.toString(2);
+			char[] rw0 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(0);
+			char[] rw1 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(1);
+			char[] rw2 = "rWing_"~std.string.toString(i)~"_"~std.string.toString(2);
+			char[] lw0 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(0);
+			char[] lw1 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(1);
+			char[] lw2 = "lWing_"~std.string.toString(i)~"_"~std.string.toString(2);
 			p = new Append(Wing.getShape() ,30);//p = new Wing();
 			//partsManager.add(append);
 			childHash["rWingBase"].addChild(p ,rw0 ,60 ,ENGAGED ,matRotateX(90) * matRotateZ(30 * (i - 2)) * matRotateX(-20) );
@@ -4580,8 +4580,8 @@
 		
 		
 		for(int i = 1;i < 5;i ++){
-			char[] t1 = "tail_"~str.toString(i-1);
-			char[] t2 = "tail_"~str.toString(i);
+			char[] t1 = "tail_"~std.string.toString(i-1);
+			char[] t2 = "tail_"~std.string.toString(i);
 			p = new Append(Tail.getShape() ,30);//p = new Tail();
 			childHash[t1].addChild(p ,t2 ,60 ,ENGAGED);
 			//append2 = append;
diff -Naur projectL_1001/src/br/ship.d projectL_1001-gentoo/src/br/ship.d
--- projectL_1001/src/br/ship.d	2007-01-28 13:32:58.000000000 +0100
+++ projectL_1001-gentoo/src/br/ship.d	2007-09-20 08:27:46.000000000 +0200
@@ -2,7 +2,7 @@
 
 private import SDL_mixer;
 private import opengl;
-private import str = std.string;
+private import std.string;
 private import std.math;
 private import util.parts;
 private import util.key;
@@ -34,7 +34,6 @@
 		int reload;
 		double gradient;
 		int cPressed;
-		double predegAim;
 //		Vector3[100] rpos0;
 //		Matrix[100] rpose0;
 	}
@@ -85,7 +84,7 @@
 		size =  20;
 		collisionRange = 10;
 		R = 1.0;G =0.88;B = 0.7;alpha = 1.5;
-		predegAim = 0.0;
+		
 		
 		pressing = 0;
 		reload = 0;
@@ -209,12 +208,8 @@
 			slow = false;
 		}else slow = true;
 		*/
-//		if(pressing > 5)speed = 5.0;
-//		else speed = 8.0;
-		if(sword)speed = 6.8;
-		else speed = 6.8;
-		
-		
+		if(pressing > 5)speed = 5.0;
+		else speed = 8.0;
 		int dir = key.getDirState();
 		int aim = 5;
 		//Vector aim = new Vector(0,0);
@@ -278,13 +273,12 @@
 				case 9:degAim=-45.0;	break;
 				case 5:
 				default:
-				degAim = predegAim;
 				moved = false;
 				break;
 		}
-		predegAim = degAim;
+		
 		if(childHash["laserGun"] !is null){
-			(cast(Beam)childHash["laserGun"]).setAim(degAim ,true);//moved);
+			(cast(Beam)childHash["laserGun"]).setAim(degAim ,moved);
 		}
 		
 		if(pos.y < screen.GAME_DOWN + size)pos.y = screen.GAME_DOWN + size;
@@ -369,7 +363,7 @@
 		length = 1000;
 		drawDist = 1;
 		rootLength = 10;
-		minSpeed = 9.0;maxSpeed = 9.0;accSpeed = 1.0;
+		minSpeed = 4.0;maxSpeed = 8.0;accSpeed = 0.4;
 		collisionManager.add(this, collisionManager.kind.LASER ,1 );
 	}
 	public void move(){
@@ -445,7 +439,7 @@
 		length = 300;
 		drawDist = 1;
 		rootLength = 100;
-		minSpeed = 15.0;maxSpeed = 15.0;accSpeed = 1.0;
+		minSpeed = 5.0;maxSpeed = 20.0;accSpeed = 1.0;
 		collisionManager.add(this, collisionManager.kind.SWORD ,1 );
 	}
 	public void move(){
@@ -455,7 +449,6 @@
 	}
 	public void setColor(double R ,double G ,double B ,double alpha){}
 	public override void reportCollision(int kind){
-//		speed = fmax(0.0 ,speed - 1.0);
 		//drawing = WIRE;
 		
 		
diff -Naur projectL_1001/src/util/ascii.d projectL_1001-gentoo/src/util/ascii.d
--- projectL_1001/src/util/ascii.d	2006-12-21 23:51:06.000000000 +0100
+++ projectL_1001-gentoo/src/util/ascii.d	2007-09-20 08:27:46.000000000 +0200
@@ -114,7 +114,7 @@
 		default:break;
 	}
 	foreach(int b;bars){
-		bar[b] = true;
+//		bar[b] = true;
 	}
 	drawCrossBar(x ,y+20*scale ,scale ,bar[0]);
 	drawVerticalBar(x-10*scale ,y+10*scale ,scale ,bar[1]);
@@ -304,4 +304,4 @@
 	glEnd();
 	
 	glPopMatrix();
-}
\ Kein Zeilenumbruch am Dateiende.
+}
