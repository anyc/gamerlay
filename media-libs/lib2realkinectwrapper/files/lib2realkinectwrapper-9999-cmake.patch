diff -Naur cmake/FindOpenNI.cmake cmake/FindOpenNI.cmake
--- cmake/FindOpenNI.cmake	1970-01-01 01:00:00.000000000 +0100
+++ cmake/FindOpenNI.cmake	2011-10-31 15:01:12.639726163 +0100
@@ -0,0 +1,51 @@
+# cmake module taken from http://lecturerecorder.googlecode.com/svn-history/r194/trunk/common/cmake/FindOpenNI.cmake
+# - Try to find OpenNI
+# Once done, this will define
+#
+#  OpenNI_FOUND - system has OpenNI
+#  OpenNI_INCLUDE_DIRS - the OpenNI include directories
+#  OpenNI_LIBRARIES - link these to use OpenNI
+
+include(LibFindMacros)
+
+IF (UNIX)
+
+  IF(NOT OPEN_NI_ROOT)
+    IF(EXISTS "/usr/include/ni")
+  	  SET(OPEN_NI_ROOT "/usr")
+    ELSEIF(EXISTS "/usr/local/include/ni")
+  	  SET(OPEN_NI_ROOT "/usr/local")
+    ELSE()
+      MESSAGE("OPEN_NI_ROOT not set. Continuing anyway..")
+    ENDIF()
+  ENDIF()
+
+#	# Use pkg-config to get hints about paths
+#	libfind_pkg_check_modules(OpenNI_PKGCONF libOpenNI)
+	# Include dir
+	find_path(OpenNI_INCLUDE_DIR
+	  NAMES XnOpenNI.h
+	  PATHS ${OpenNI_PKGCONF_INCLUDE_DIRS} ${OPEN_NI_ROOT}/include/ni
+	)
+	# Finally the library itself
+	find_library(OpenNI_LIBRARY
+	  NAMES OpenNI
+	  PATHS ${OpenNI_PKGCONF_LIBRARY_DIRS} ${OPEN_NI_ROOT}/lib
+	)
+ELSEIF (WIN32)
+	find_path(OpenNI_INCLUDE_DIR
+	  NAMES XnOpenNI.h
+	  PATHS "${OPEN_NI_ROOT}/Include" "C:/Program Files (x86)/OpenNI/Include" "C:/Program Files/OpenNI/Include" ${CMAKE_INCLUDE_PATH}
+	)
+	# Finally the library itself
+	find_library(OpenNI_LIBRARY
+	  NAMES OpenNI
+	  PATHS "${OPEN_NI_ROOT}/Lib" "C:/Program Files (x86)/OpenNI/Lib" "C:/Program Files/OpenNI/Lib" ${CMAKE_LIB_PATH}
+	)
+ENDIF()
+	
+# Set the include dir variables and the libraries and let libfind_process do the rest.
+# NOTE: Singular variables for this library, plural for libraries this this lib depends on.
+set(OpenNI_PROCESS_INCLUDES OpenNI_INCLUDE_DIR OpenNI_INCLUDE_DIRS)
+set(OpenNI_PROCESS_LIBS OpenNI_LIBRARY OpenNI_LIBRARIES)
+libfind_process(OpenNI)
diff -Naur cmake/LibFindMacros.cmake cmake/LibFindMacros.cmake
--- cmake/LibFindMacros.cmake	1970-01-01 01:00:00.000000000 +0100
+++ cmake/LibFindMacros.cmake	2011-10-31 14:12:39.709757683 +0100
@@ -0,0 +1,100 @@
+# taken from http://lecturerecorder.googlecode.com/svn-history/r194/trunk/common/cmake/LibFindMacros.cmake
+# Works the same as find_package, but forwards the "REQUIRED" and "QUIET" arguments
+# used for the current package. For this to work, the first parameter must be the
+# prefix of the current package, then the prefix of the new package etc, which are
+# passed to find_package.
+macro (libfind_package PREFIX)
+  set (LIBFIND_PACKAGE_ARGS ${ARGN})
+  if (${PREFIX}_FIND_QUIETLY)
+    set (LIBFIND_PACKAGE_ARGS ${LIBFIND_PACKAGE_ARGS} QUIET)
+  endif (${PREFIX}_FIND_QUIETLY)
+  if (${PREFIX}_FIND_REQUIRED)
+    set (LIBFIND_PACKAGE_ARGS ${LIBFIND_PACKAGE_ARGS} REQUIRED)
+  endif (${PREFIX}_FIND_REQUIRED)
+  find_package(${LIBFIND_PACKAGE_ARGS})
+endmacro (libfind_package)
+
+# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)
+# where they added pkg_check_modules. Consequently I need to support both in my scripts
+# to avoid those deprecated warnings. Here's a helper that does just that.
+# Works identically to pkg_check_modules, except that no checks are needed prior to use.
+macro (libfind_pkg_check_modules PREFIX PKGNAME)
+  if (${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} EQUAL 4)
+    include(UsePkgConfig)
+    pkgconfig(${PKGNAME} ${PREFIX}_INCLUDE_DIRS ${PREFIX}_LIBRARY_DIRS ${PREFIX}_LDFLAGS ${PREFIX}_CFLAGS)
+  else (${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} EQUAL 4)
+    find_package(PkgConfig)
+    if (PKG_CONFIG_FOUND)
+      pkg_check_modules(${PREFIX} ${PKGNAME})
+    endif (PKG_CONFIG_FOUND)
+  endif (${CMAKE_MAJOR_VERSION} EQUAL 2 AND ${CMAKE_MINOR_VERSION} EQUAL 4)
+endmacro (libfind_pkg_check_modules)
+
+# Do the final processing once the paths have been detected.
+# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain
+# all the variables, each of which contain one include directory.
+# Ditto for ${PREFIX}_PROCESS_LIBS and library files.
+# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.
+# Also handles errors in case library detection was required, etc.
+macro (libfind_process PREFIX)
+  # Skip processing if already processed during this run
+  if (NOT ${PREFIX}_FOUND)
+    # Start with the assumption that the library was found
+    set (${PREFIX}_FOUND TRUE)
+
+    # Process all includes and set _FOUND to false if any are missing
+    foreach (i ${${PREFIX}_PROCESS_INCLUDES})
+      if (${i})
+        set (${PREFIX}_INCLUDE_DIRS ${${PREFIX}_INCLUDE_DIRS} ${${i}})
+        mark_as_advanced(${i})
+      else (${i})
+        set (${PREFIX}_FOUND FALSE)
+      endif (${i})
+    endforeach (i)
+
+    # Process all libraries and set _FOUND to false if any are missing
+    foreach (i ${${PREFIX}_PROCESS_LIBS})
+      if (${i})
+        set (${PREFIX}_LIBRARIES ${${PREFIX}_LIBRARIES} ${${i}})
+        mark_as_advanced(${i})
+      else (${i})
+        set (${PREFIX}_FOUND FALSE)
+      endif (${i})
+    endforeach (i)
+
+    # Print message and/or exit on fatal error
+    if (${PREFIX}_FOUND)
+      if (NOT ${PREFIX}_FIND_QUIETLY)
+        message (STATUS "Found ${PREFIX} ${${PREFIX}_VERSION}")
+      endif (NOT ${PREFIX}_FIND_QUIETLY)
+    else (${PREFIX}_FOUND)
+      if (${PREFIX}_FIND_REQUIRED)
+        foreach (i ${${PREFIX}_PROCESS_INCLUDES} ${${PREFIX}_PROCESS_LIBS})
+          message("${i}=${${i}}")
+        endforeach (i)
+        message (FATAL_ERROR "Required library ${PREFIX} NOT FOUND.\nInstall the library (dev version) and try again. If the library is already installed, use ccmake to set the missing variables manually.")
+      endif (${PREFIX}_FIND_REQUIRED)
+    endif (${PREFIX}_FOUND)
+  endif (NOT ${PREFIX}_FOUND)
+endmacro (libfind_process)
+
+macro(libfind_library PREFIX basename)
+  set(TMP "")
+  if(MSVC80)
+    set(TMP -vc80)
+  endif(MSVC80)
+  if(MSVC90)
+    set(TMP -vc90)
+  endif(MSVC90)
+  set(${PREFIX}_LIBNAMES ${basename}${TMP})
+  if(${ARGC} GREATER 2)
+    set(${PREFIX}_LIBNAMES ${basename}${TMP}-${ARGV2})
+    string(REGEX REPLACE "\\." "_" TMP ${${PREFIX}_LIBNAMES})
+    set(${PREFIX}_LIBNAMES ${${PREFIX}_LIBNAMES} ${TMP})
+  endif(${ARGC} GREATER 2)
+  find_library(${PREFIX}_LIBRARY
+    NAMES ${${PREFIX}_LIBNAMES}
+    PATHS ${${PREFIX}_PKGCONF_LIBRARY_DIRS}
+  )
+endmacro(libfind_library)
+
diff -Naur CMakeLists.txt CMakeLists.txt
--- CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ CMakeLists.txt	2011-10-31 15:02:02.119725626 +0100
@@ -0,0 +1,34 @@
+PROJECT (2realkinectwrapper)
+SET (LIBRARYNAME 2realkinectwrapper)
+SET (LIB_MAJOR 0)
+SET (LIB_MINOR 9)
+SET (LIB_RELEASE 0)
+
+cmake_minimum_required(VERSION 2.8)
+
+SET ( CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake" )
+
+find_package(Boost REQUIRED)
+find_package(OpenNI REQUIRED)
+
+SET ( CMAKE_INSTALL_PREFIX "/usr/local/" CACHE PATH "installpath prefix" )
+
+IF ( DEBUG )
+	SET ( CMAKE_CXX_FLAGS "-g -O0 -Wall -pipe -ggdb")
+ENDIF ( DEBUG )
+
+INCLUDE_DIRECTORIES	(
+			${Boost_INCLUDE_DIRS}
+			${OpenNI_INCLUDE_DIRS} 
+			)
+
+SET(EXTRA_LIBS
+	${Boost_LIBRARIES}
+	${OpenNI_LIBRARIES}
+)
+
+SET(CMAKE_CXX_FLAGS "-Wall -U_FORTIFY_SOURCE ${CMAKE_CXX_FLAGS}")
+
+add_subdirectory(src)
+add_subdirectory(include)
+
diff -Naur include/CMakeLists.txt include/CMakeLists.txt
--- include/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ include/CMakeLists.txt	2011-10-31 14:54:50.669730294 +0100
@@ -0,0 +1,4 @@
+FILE ( GLOB files "*.h" )
+INSTALL ( FILES ${files} DESTINATION include/${LIBRARYNAME} )
+
+
diff -Naur src/CMakeLists.txt src/CMakeLists.txt
--- src/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ src/CMakeLists.txt	2011-10-31 15:02:12.999725507 +0100
@@ -0,0 +1,32 @@
+cmake_minimum_required(VERSION 2.8)
+PROJECT (2realkinectwrapper)
+SET(CMAKE_INSTALL_SO_NO_EXE "0")
+
+SET(SOURCES
+_2RealKinect.cpp
+_2RealLogger.cpp
+_2RealTrackedJoint.cpp
+_2RealTrackedUser.cpp
+_2RealTypes.cpp
+_2RealVector2f.cpp
+	)
+
+INCLUDE_DIRECTORIES	(
+					${2realkinectwrapper_SOURCE_DIR}
+					${2realkinectwrapper_SOURCE_DIR}/../include
+					${2realkinectwrapper_SOURCE_DIR}/OpenNISpecific
+					)
+
+SET ( SRC_compile ${SOURCES} )
+ADD_LIBRARY ( ${LIBRARYNAME} SHARED ${SOURCES} )
+TARGET_LINK_LIBRARIES( ${LIBRARYNAME} ${EXTRA_LIBS} )
+
+add_subdirectory(OpenNISpecific)
+TARGET_LINK_LIBRARIES( ${LIBRARYNAME} OpenNISpecific ${EXTRA_LIBS} )
+
+SET (_soversion ${LIB_MAJOR}.${LIB_MINOR}.${LIB_RELEASE})
+set_target_properties(${LIBRARYNAME} PROPERTIES SOVERSION ${LIB_MAJOR} VERSION ${_soversion})
+TARGET_LINK_LIBRARIES(${LIBRARYNAME})
+SET (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
+INSTALL(TARGETS ${LIBRARYNAME} LIBRARY DESTINATION lib )
+
diff -Naur src/OpenNISpecific/CMakeLists.txt src/OpenNISpecific/CMakeLists.txt
--- src/OpenNISpecific/CMakeLists.txt	1970-01-01 01:00:00.000000000 +0100
+++ src/OpenNISpecific/CMakeLists.txt	2011-10-31 08:58:12.209961862 +0100
@@ -0,0 +1,15 @@
+project(OpenNISpecific)
+
+SET(ONISRC
+OpenNIColorGenerator.cpp
+OpenNIDepthGenerator.cpp
+OpenNIDevice.cpp
+OpenNIInfraredGenerator.cpp
+OpenNIUserGenerator.cpp
+	)
+
+add_library(
+	OpenNISpecific
+	STATIC
+	${ONISRC}
+)
